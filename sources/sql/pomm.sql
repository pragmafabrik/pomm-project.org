--
-- PostgreSQL database dump
--

SET statement_timeout = 0;
SET lock_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SET check_function_bodies = false;
SET client_min_messages = warning;

--
-- Name: pomm; Type: SCHEMA; Schema: -; Owner: -
--

CREATE SCHEMA pomm;


SET search_path = pomm, pg_catalog;

--
-- Name: slugify_title(); Type: FUNCTION; Schema: pomm; Owner: -
--

CREATE FUNCTION slugify_title() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
  NEW.slug = public.slugify(NEW.title);
  RETURN NEW;
END;
$$;


--
-- Name: comment_id_seq; Type: SEQUENCE; Schema: pomm; Owner: -
--

CREATE SEQUENCE comment_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


SET default_tablespace = '';

SET default_with_oids = false;

--
-- Name: comment; Type: TABLE; Schema: pomm; Owner: -; Tablespace: 
--

CREATE TABLE comment (
    id integer DEFAULT nextval('comment_id_seq'::regclass) NOT NULL,
    article_slug character varying NOT NULL,
    email character varying NOT NULL,
    created_at timestamp without time zone DEFAULT now() NOT NULL,
    website character varying,
    content text NOT NULL,
    name character varying NOT NULL,
    CONSTRAINT comment_email_check CHECK (public.is_email(email)),
    CONSTRAINT comment_website_check CHECK (public.is_url(website))
);


--
-- Name: news; Type: TABLE; Schema: pomm; Owner: -; Tablespace: 
--

CREATE TABLE news (
    slug character varying NOT NULL,
    title character varying,
    created_at timestamp without time zone,
    published_at timestamp without time zone,
    content text,
    accept_comments boolean
);


--
-- Name: old_news; Type: TABLE; Schema: pomm; Owner: -; Tablespace: 
--

CREATE TABLE old_news (
    slug character varying NOT NULL,
    title character varying NOT NULL,
    created_at timestamp without time zone DEFAULT now() NOT NULL,
    published_at timestamp without time zone DEFAULT now(),
    content text NOT NULL,
    accept_comments boolean DEFAULT true
);


--
-- Data for Name: comment; Type: TABLE DATA; Schema: pomm; Owner: -
--

COPY comment (id, article_slug, email, created_at, website, content, name) FROM stdin;
3	the-final-cut	contact@jfsimon.fr	2012-02-19 13:33:04.159447	\N	Really nice, Postgres is so powerful! I still wonder why everyone around me seem to use mysql :/	JF Simon
4	the-final-cut	hubert.Greg@gmail.com	2012-02-19 17:44:40.938187	http://www.coolkeums.org	Because the worst ennemy of a better software is an average one that does just the job :)\r\n\r\nMost of the PHP programer I met do prefer have simple queries and manage the complexity in the PHP layer. With Postgres, you can shape your data to minimize the complexity and get the job done in a simpler way.	greg
6	2-talks-about-postgres-and-pomm-in-june-2012	hubert.Greg@gmail.com	2012-04-18 19:39:14.435951	\N	The talk at the PHP Forum 2012 will take place at Salon Honorat 10:15am on 5th of June, just after the opening keynote.	Greg
7	2-talks-about-postgres-and-pomm-in-june-2012	hubert.Greg@gmail.com	2012-04-29 11:04:00.49037	\N	The talk at the sflive wille take place friday the 8th at 16:30.	Greg
45	conference-about-omm-and-pomm-at-the-french-pgday-2013	hubert.greg@gmail.com	2013-06-15 10:28:45.499388	\N	The slides are online, see the link in the left bar on this site.	greg
49	pomm-1-2-is-on-the-launchpad	tmoyse@gmail.com	2013-09-17 09:10:32.384056	\N	Pomm 1.2 "Fleur" release !	t8g
3	the-final-cut	contact@jfsimon.fr	2012-02-19 13:33:04.159447	\N	Really nice, Postgres is so powerful! I still wonder why everyone around me seem to use mysql :/	JF Simon
4	the-final-cut	hubert.Greg@gmail.com	2012-02-19 17:44:40.938187	http://www.coolkeums.org	Because the worst ennemy of a better software is an average one that does just the job :)\r\n\r\nMost of the PHP programer I met do prefer have simple queries and manage the complexity in the PHP layer. With Postgres, you can shape your data to minimize the complexity and get the job done in a simpler way.	greg
6	2-talks-about-postgres-and-pomm-in-june-2012	hubert.Greg@gmail.com	2012-04-18 19:39:14.435951	\N	The talk at the PHP Forum 2012 will take place at Salon Honorat 10:15am on 5th of June, just after the opening keynote.	Greg
7	2-talks-about-postgres-and-pomm-in-june-2012	hubert.Greg@gmail.com	2012-04-29 11:04:00.49037	\N	The talk at the sflive wille take place friday the 8th at 16:30.	Greg
45	conference-about-omm-and-pomm-at-the-french-pgday-2013	hubert.greg@gmail.com	2013-06-15 10:28:45.499388	\N	The slides are online, see the link in the left bar on this site.	greg
49	pomm-1-2-is-on-the-launchpad	tmoyse@gmail.com	2013-09-17 09:10:32.384056	\N	Pomm 1.2 "Fleur" release !	t8g
\.


--
-- Name: comment_id_seq; Type: SEQUENCE SET; Schema: pomm; Owner: -
--

SELECT pg_catalog.setval('comment_id_seq', 49, true);


--
-- Data for Name: news; Type: TABLE DATA; Schema: pomm; Owner: -
--

COPY news (slug, title, created_at, published_at, content, accept_comments) FROM stdin;
pomm-1-1-0-is-available	Pomm 1.1.0 is available	2012-12-11 23:17:47.527012	2012-12-11 23:17:47.527012	\n<p>It all started with <a href="https://github.com/chanmix51/sfPgLookPlugin/tree/9655db285df5eb57b1871b3f0542c589d786e48e">symfony 1 PgLook plugin</a> 3 years ago. Pomm's first commit was made nearly 2 years ago and today, Pomm 1.1.0 is out.</p>\n<p>During this time spent in making Pomm a better Object Model Manager, the initial idea that was lurking under years of practice of ORMs and PDO sprung up. Relational databases have been made to manipulate sets of data. By definitions sets are extendible and are hard to fit in the OOP world were classes must be defined and typed. Pomm now comes with a rich API that provides fields selector methods and formatters so programmers can shape sets using Postgres unique features and hydrate them into PHP objects.</p>\n<p>Pomm 1.1 features Postgresql 9.2 range and json type support. The HStore support has been greatly enhanced, you can really use HStore to save any PHP associative arrays as long as they contain strings. Collections fetched from the database can be easily exported to array to ease php's Json transformation needed when coding a web service ... There are a lot more features coming with this release, all born from the pragmatic necessity of real life projects.</p>\n<p>Programmers are able to leverage the power of their relational database trough using SQL and in the same time benefit from a handy object oriented model manager. Some of them showed enthusiasm, some other gave support, reported bugs and posted pull requests on github. Many thanks to all who did contribute to make Pomm a better software.</p>\n	f
beta2	Beta2	2011-07-25 17:18:50.469612	2011-07-25 17:18:50.469612	<p>Pomm second beta release is out. The menu includes new geometric converters (segment and circle) and a (hopefully) bug free HStore converter.</p>\n<p><strong>Important !</strong> The <i>Integer</i> converter has been renamed to <i>Number</i> because it covers integers, numerics and floats. If you upgrade from version beta1, regenerate your base files so converters will be automatically updated. </p>	t
1-0-4-is-out-lot-of-bugfix	1.0.4 is out, lot of bugfix.	2012-07-11 19:59:07.648303	2012-07-11 19:59:07.648303	<p>After 1.0 branch forked from the master branch, the first job before going on the development has been to rewrite the tests using phpunit. I can say it really made a difference with the 1.0 test suite. Lot of little (and bigger) bugs were spotted and fixed, these corrections has also been applied in the 1.0 branch: the version 1.0.5 is out.</p>\n<p>There are also a couple of non addressed bugs like the ones found in the binary converter (<a href="https://github.com/chanmix51/Pomm/issues/32">here</a> and <a href="https://github.com/chanmix51/Pomm/issues/31">here</a>). Help would be appreciated if you had any idea on how to do that in PHP.</p>\n<p>As the phpunit migration is nearly over, summer will likely see some of the <a href="https://github.com/chanmix51/Pomm/issues?milestone=4&page=1&state=open">1.1 features</a> implemented in the master branch.</p>\n	t
pomm-1-2-is-on-the-launchpad	Pomm 1.2 is on the launchpad	2013-09-16 17:57:09.931758	2013-09-16 17:57:09.931758	\n<div class="body">\n<p>9 months after the 1.1 release, the first release candidate of the 1.2 version is out. This kind of blog posts often mention that is has been a tough work to make this release to happen but, here, it is not the case. The main word of this release was "Keep It Stupid and Simple" and as such, time has been taken to ensure chosen solutions were the best fit.</p>\n<div class="section" id="pomm-now-uses-php-s-native-postgresql-api">\n<h3>Pomm now uses PHP's native Postgresql API</h3>\n<p>And this is a huge improvement ! The first thought is going to speed gain this change triggers. But this also makes the converters to be simplest and more efficient in addition of making the binary converter to fully support arrays.</p>\n</div>\n<div class="section" id="re-usable-prepared-statements">\n<h3>Re-usable prepared statements</h3>\n<p>In past versions of Pomm, every time a query was made, it was prepared, run and destroyed. If the query was to be issued again, the process was iterated over and over. It is not the case anymore, every prepared statements are buffered in the Connection class ans re used if necessary. This also leads to a dramatic performance gain. Another difference from Pomm's previous versions is that you can use prepared statements directly by yourself.</p>\n</div>\n<div class="section" id="connections-made-configurable">\n<h3>Connections made configurable</h3>\n<p>It is now possible to SET Postgresql environment variables at connection's start. Default interval style and timestamp style are enforced this way using ISO8601 standard which makes the according converters to be faster and simpler. It is now a lot easier to code a converter associated with a special formatted type.</p>\n</div>\n<div class="section" id="escapable-values">\n<h3>Escapable values</h3>\n<p>In previous versions of Pomm, it was not possible to save an object using Postgresql function to set some of its values. It is now possible to set escaped commands in entities values so they are interpreted in Postgresql :</p>\n<blockquote>\n<p>&lt;?php</p>\n<dl class="docutils">\n<dt>$entity = $entity_map-&gt;createAndSaveObject(</dt>\n<dd>array('data1' =&gt; new PommTypeEscape("my_schema.my_pg_function('something')")));</dd>\n</dl>\n<p>echo $entity['data1']; // the result of Postgresql function my_pg_function('something')</p>\n</blockquote>\n</div>\n<div class="section" id="code-clean-up">\n<h3>Code clean up</h3>\n<p>The connection <cite>filterchain</cite> has disappeared, so have the <cite>Collection</cite> and <cite>SimpleCollection</cite> classes replaced by a single <cite>Collection</cite> class. The Collection filters have been rewritten to a simpler implementation.</p>\n</div>\n </div>\n	t
why-pomm	Why Pomm ?	2012-09-21 16:32:56.17791	2012-09-21 16:32:56.17791	\n <p>I recently received comments which are very very useful to know what people think about Pomm project after just having taken a glance at the official website. I will comment back here a couple of negative comments.</p>\n <div class="section" id="pomm-is-the-doctrine-of-the-poor">\n <h1>Is Pomm the Doctrine of the poor ?</h1>\n <p>Let's begin where it hurts:</p>\n <pre class="literal-block">\n   Pomm claims no to be an ORM but I do not perceive the difference.\n  It looks like Doctrine with less features and specific to Postgresql.\n </pre>\n <p>Well, this indicates hundred of people who visited Pomm's website left thinking the same thing. In fact, Pomm shares almost nothing with Doctrine as the underlying philosophy is utterly different.</p>\n <p>Pomm does not need the high level abstraction of an ORM because it relies on Postgresql's features. Postgres already has some object oriented features. You can manage data from tables as they were objects and fetch relations directly in your SQL queries. Pomm with its converter system takes advantage of that. Instead of trying to create an object  abstraction over a relational set of data, it just transposes what's in Postgres to PHP.</p>\n <p>This is a big win because the 40 years old SQL language has been made for querying and presenting data. Developers using it are able to directly extract from the database the data they want presented in the best way for their business process needs. This makes the PHP code slim, fast and easy to test. This is also a big win from the performance perspective.</p>\n <pre class="literal-block">ORMs is what you get when object oriented programmers code a data store over a relational database.\n Postgresql is what you get when relational database developers code an object oriented data store.\n </pre>\n <p>On the other side, PHP which is often bashed for the weak typing and its loose object structure is a perfect match when it gets to be married with SQL. SQL is a strongly typed declarative paradigm language dedicated to the data crossing and presentation. PHP is an imperative paradigm language good at creating web workflows. It can map elastic objects over result-sets returned by SQL as soon as you sandwich a nice data converter between those two layers. This is what Pomm is. Let Postgres manage relations between objects and return you the data your business needs so Pomm map them to PHP objects.</p>\n <p>Pomm's converter is the most tested part of Pomm. It allows you to fetch from Postgres objects that contain arrays of objects containing arrays of objects and so on. It supports HStore key value stores and map them to PHP associative arrays. It supports Pg's geometric types and many more (xml, json, ranges etc.). You can even define your own types like you would do in an object oriented paradigm and tell Pomm what PHP representation you want to link them with.</p>\n <p>In an ORM world, classes are strongly coupled to tables, with Pomm, classes are loosely coupled to sets. You can define a map class that is tied with <tt class="docutils literal">VALUES ('pika', 'chu')</tt>. Of course the <tt class="docutils literal">findAll()</tt> method of such class would always return one instance with the same values but isn't that by example what you want in a test suite ?</p>\n </div>\n <div class="section" id="it-s-all-about-tools">\n <h1>It's all about tools</h1>\n <p>It is not my intention to reopen the <a class="reference external" href="http://www.codinghorror.com/blog/2006/06/object-relational-mapping-is-the-vietnam-of-computer-science.html">ORM war</a> here nor to say bad things about Doctrine. As another comment said:</p>\n <pre class="literal-block">\n Doctrine2 is all-right for all the developers needs.\n </pre>\n <p>And that's as true as thinking you can almost do <a class="reference external" href="http://www.revision-zero.org/orm-haters-do-get-it">every kind of work</a> with a swiss army knife so why would you be interested in <a class="reference external" href="http://www.craigkerstiens.com/2012/04/30/why-postgres/">specialized tools</a> ?</p>\n <p>I do valve amplifiers as a hobby aside my real job and I started working steel enclosures with a Dremel. I found this hard, I was very bad at it and the result was just acceptable. I am not saying Dremel is bad -- I still use it almost everyday -- but since this time I have bought a professional drill set with a real drill and guess what: the <strong>job is perfect and done in less time</strong>. As the implementation part stopped being an obstacle, I began to have new ideas I couldn't even imagine before. On the other hand, I cannot use these drills on a concrete wall nor a piece of wood without damaging them and obtaining poor results. That's a question of choice, mine is to use the right tool for the right job.</p>\n </div>\n	t
pomm-1-0-6-is-out	Pomm 1.0.6 is out	2012-09-12 13:35:47.413922	2012-09-12 13:35:47.413922	<p>This new version of the stable branch of Pomm fixes a potential security issue when using the <code>PgNumber</code> converter that could lead to SQL injection. Thank so much to <a href="https://github.com/kcivey">Keith C.Ivey</a> for spotting and fixing the problem. Some other minor bugs have been killed.</p>\n	t
beta4-intervals-and-pagination	Beta4, intervals and pagination.	2011-11-19 08:12:06.857826	2011-11-19 08:12:06.857826	\n<p>I am happy to announce the 4th beta release of the Pomm non ORM. It brings to Pomm really nice features:</p>\n<ul>\n  <li><em>Collection filters</em> make you able to get foreign object from SQL joins.</il>\n  <li><em>a Pager class</em> for convenient pagination.</li>\n  <li><em>Intervals and UUID types</em> are now supported.</li>\n<li><em>MySQL incompatibility</em> due to the unsupported INSERT ... RETURNING *</li>\n</ul><p>More to come soon !</p>	t
fall-2012-news	Fall 2012 news	2012-09-10 09:27:08.533879	2012-09-10 09:27:08.533879	<p>The summer has been quite busy for Pomm's project. As the 1.0 branch is become more and more quiet the development branch had a lot of its tickets closed. </p>\n<p>\nAmongst the changes:\n<ul>\n  <li>The tests have been ported to phpunit.</li>\n  <li><code>getFields()</code> method now handle column aliasing.</li>\n  <li>New handy methods in the map class like <code>joinSelectFieldsWithAlias()</code>.</li>\n</ul>\n</p>\n<p>Some bugs have also been reported and sometimes PR have been submitted. Thank you for your interest and commitment to Pomm. If some of you plan to assist the <a href="http://http://confoo.ca">Confoo</a> conference in Montreal in Feb 2013, I have submitted <a href="http://confoo.ca/en/call-for-papers/speaker/gregoire-hubert">a talk about Postgres and Pomm</a>, so if you are interested to hear about that, do not hesitate to register and vote for my talk.</p>\n	t
use-form-with-pomm-in-silex	Use form with Pomm in Silex	2012-11-21 15:05:38.015034	2012-11-21 15:05:38.015034	\n<p>One may be tempted to use Postgresql's nice constraint system to validate forms but it is indeed a bad idea. Forms are business oriented rules, there can be multiple forms with multiple validation rules for the same group of database objects. Moreover, these rules can change often. Coding them in the PHP layer is by far a best choice and Symfony provides two components: <a href="https://github.com/symfony/Form [Form component]">form</a> and <a href="https://github.com/symfony/Validator [Validator component]">validator</a>. These components are integrated in the Symfony Standard Edition Framework but they can also be used with your own development framework and ... the <a href="https://github.com/fabpot/Silex [Silex]">Silex µ-framework</a>.</p>\n\n<p>This post will show a small example on how to create and validate form using Silex.</p>\n\n<h2>Form class creation</h2>\n\n<p>If you read the <a href="http://symfony.com/doc/current/book/forms.html [Symfony documentation]">documentation</a> of the Form component you could be puzzle about how to set up your forms amongst the many ways made possible by this nice piece of software. The <a href="http://silex.sensiolabs.org/doc/providers/form.html [Silex Form documentation]">Silex documentation</a> also proposes a simple and efficient way to achieve validation with forms. The first difference with the documentation is that we are using Pomm hence non <a href="http://en.wikipedia.org/wiki/Plain_Old_Java_Object">POPO</a> entities. Since entities values are not stored in real attributes nor use real getters, it is not possible to use the java-ish implementation of the validator metadata classes. </p>\n\n<p>Fortunately, the Form component is very modular and accepts to declare validation rules directly with from the FormBuilder. Let's create a Form class in a dedicated namespace of our application:</p>\n\n<script src="https://gist.github.com/4124003.js?file=Comment.php"></script>\n\n<p>What do we have here ?</p>\n\n<p>A class that extends the <code>AbstractType</code> and implements the two abstract methods needed to create a form: </p>\n\n\n<ul>\n<li><code>buildForm</code> is trigged by the form factory to describe the form.</li>\n<li><code>getName</code> is used to store the form's values.</li>\n</ul>\n\n\n<p>The great thing here is the form builder accepts validation rules as parameter of each field allowing developers to set in one shot fields definition and validation.</p>\n\n<h2>Set up the form</h2>\n\n<script src="https://gist.github.com/4124003.js?file=app1.php"></script>\n\n<p>This controller's goal is to display a blog post and a form for comments. The first lines retrieve the blog post with all its comments (if any) using a <a href="http://pomm.coolkeums.org/documentation/examples#objects">specific query</a> of the model layer. If the post does not exist, the URL points to a non existent resource and 404 error page is returned. </p>\n\n<p>Then, the form factory is invoked with our <code>Form\\Comment</code> instance as argument and the view is extracted from the form and passed to the template.</p>\n\n<h2>Validate the form</h2>\n\n<script src="https://gist.github.com/4124003.js?file=app2.php"></script>\n\n<p>The code is almost self explanatory. It looks quite the same as the previous example but instead of extracting the view from the form, the <code>validate</code> method triggers the validation set up in the <code>Form\\Comment</code>. It is then easy to check if the form is valid or not. If it is the case, the <code>createAndSaveObject</code> method is called to hydrate and save a comment object from the cleaned values. </p></div>\n	f
pomm-s-french-tutorial-on-developpez-com	Pomm's French tutorial on developpez.com	2013-02-27 10:04:03.743017	2013-02-27 10:04:03.743017	\n<div>\n<p>Thanks to <a href="https://twitter.com/MaitrePylos">MaitrePylos</a>'s work, the french version of the tutorial is available on <a href="http://www.developpez.com/index/redirect/15900/Pomm-un-gestionnaire-de-modele-objet-dedie-a-PostgreSQL-un-article-de-Gregoire-Hubert/">developpez.com</a>. </p>\n<p>Do not hesitate to post your feedback on the <a href="http://php.developpez.com/actu/51913/Manipulez-vos-donnees-avec-Pomm-un-ORM-PHP-pour-PostgreSQL/">dedicated topic</a>.</p></div>	t
pomm-reported-to-work-with-mysql	Pomm reported to work with MySQL !	2011-10-13 08:51:29.4899	2011-10-13 08:51:29.4899	<p>I must say, I am impressed. Some people reported they have been able to use Pomm with Mysql just by changing the way the DSN was handled by PDO in the <i>Connection</i> class. Of course the database introspection does not work, but they used Postgres to generate their model files and just change the DSN to get it to work with MySQL.</p><p>All basic types like string, int, timestamp seem to work, I have no information yet on float and boolean and I have no hope HStore, Circle and other unsupported data type will work with MySQL. Anyway it may cover 90% of simple webstite's needs ;)</p><p>Enjoy !</p>	t
important-bugfix-1-0-1-is-out	Important bugfix: 1.0.1 is out	2012-03-09 13:32:20.261845	2012-03-09 13:32:20.261845	<p>In order to fix an important bug in the base map class generation, the 1.0.1 is available sooner as expected. The bug was arrays were generated to incorrect types that ware not handled by any converter. Unfortunately the map generator was the only part missing in the test suite. More sad is the fact that the 1.0.0 version was released with this bug.</p>\n<p>Another point, there is a new little feature in the <code>PgEntity</code> converter: the <code>_extra</code> field. This is used to handle any extra field that would come with a table composite data in query like shown in <a href="http://pomm.coolkeums.org/documentation/examples#objects">this code example</a>. Regardless to this specific feature, it is important to set up a release and version policy at this point. Can extra features be added into a mainstream release? I think not because it makes the documentation obsolete and can introduce side effects in the way the API is used. From now, <strong>the 1.0 branch will not include any new feature</strong>.</p>\n<p>The last point is about PHP namespaces used in the generated map files. The name provided as option to the database constructor (or to the <code>Service</code> class) is used. If not provided, the real database name is used which can lead to problems when different database names are used between the development and the production environments. This <code>name</code> options was implemented but not documented.</p>\n<p>With this release, Pomm project is providing the best release so far.</p>	t
pomm-1-1-0-rc2-is-out	Pomm 1.1.0-RC2 is out	2012-10-30 13:19:18.150559	2012-10-30 13:19:18.150559	<p>After a one month test period, some bugs have been fixed and the identity mapper has been re factored to a simplest and more maintainable implementation. This version has been rewritten with in mind the fact that the identity mapper is not a cache to prevent some queries to be done. It is instead the only method to ensure the same object fetched twice from the database will be represented as a single instance in PHP.</p>\n<p>The <a href="http://pdepend.org/">PHP Depend</a> code analyzer has been run against Pomm sources. The results are shown hereafter:</p><p><img src="/images/pyramid.svg"><em>Overview pyramid</em></p>\n<p>The <a href="http://pdepend.org/documentation/handbook/reports/overview-pyramid.html">overview pyramid</a> shows a number of interesting statistics about how healthy Pomm's code is:\n<ul>\n  <li>The cyclomatic ratio is 0.216 which is average.</li>\n  <li>Code encapsulation is good with an average of a bit more than 11 lines of code per method.</li>\n  <li>Another indicator of encapsulation is the average of 6.3 methods per class, so far so good.</li>\n  <li>The classes per package ratio is a bit low indicating Pomm could grow.... it is not the goal as we want to keep it performance wise.</li>\n  <li>The inheritance indicators still show low complexity in heirs tree.</li>\n  <li>Each method is called by an average of 2.7 times in the code which is good.</li>\n  <li>The low FANOUT/CALLS indicators show each package does not export its complexity outside itself, which is excellent.</li>\n</ul>\n  <p>The coupling indicators are very important as they show how the KISS principles are respected hence make the application maintainable and stable over time. Of course these numbers are to be balanced with the fact Pomm is a little project (approx 11k lines of code) and the values are average with no indication about the variance.</p>\n  <p>Another statistic not dumped by PHPDepend is the test coverage. Theoretically, the number of unit tests should equals the total cyclomatic complexity to ensure every path of the running code is tested. This would mean Pomm should have 955 test assertions to pretend a test coverage of 100%, the actual number of tests are 396. Here again, precaution must be observed as we have no information about the repartition of the test coverage. Some parts may be very well tested whereas some other are poorly covered. A closer look would show that CYLO of the converter system is 78 and there are actually 118 test assertions on this part. In the Tools package, the cyclomatic complexity is a mere 104 and there are only 12 unit tests on this part.</p>\n<p>Last thing: I had excellent feedbacks about the conferences I gave in Paris and Nantes about Postgresql and Pomm. Many thanks to people who got interested into this project, some of them did even post PRs on github. Thank you !</p>	f
the-lost-age-of-innocence	The lost age of innocence.	2011-11-26 13:04:22.945785	2011-11-26 13:04:22.945785	<p>Pomm has been under development for a while. It was aimed at being simple, fast, lightweight and efficient. I must say I am pretty happy of what it has become over time and I was very exited when I did implement the filter feature because it made Pomm able to simulate relations between objects. This was also the starting point of a the research for a way to keep consistency between fetched objects from the database.</p><p>A dumb implementation meant 1 instance per fetch, if an object is fetched twice from the database it would have two instances of the same class and the same values. As soon as you create an OO relation using a JOIN it becomes a problem.</p><p>Fortunately Pomm is far from being the first database Object Mapper and this problem has a solution in the name of the <em>Identity Mapper</em> design pattern. This pattern uses an index of fetched objects to ovoid fetching them twice from the database. From my point of view, this makes sense in the Java world where there are application servers that keep running for days and months. In PHP the environment is different. The whole world is instanciated once, the response is sent and then all instances die. This lowers the benefits of the <em>Identity Mapper</em> while making it downsides stronger.</p><p>Keeping an index of all fetched object prevent PHP's garbage collector to work efficiently as we keep at least an instance in the index. Even if I want to be smart and try to check if this instance is modified or not, if I just fetch an instance from the database, modify it and unset it, there is no way I'll be able to fetch this object again from the database, the identity mapper will keep returning me the same broken instance.</p>\n<p>Because it can be bug and feature, I wanted to let the developers be able to manage the <em>IdentityMapper</em> in Pomm. The first question was "Where to store it ?". In the map classes ? As a separate service ? The place I felt the more comfortable with this was the <em>Connection</em> class. You can set a default <em>IdentityMapper</em> class in the database options, but you can also provide an instance in the <em>createConnection()</em> method of the <em>Database</em> class.</p><p>There are 3 different possible classes to choose from: <em>IdentityMapperNone</em>, <em>IdentityMapperStrict</em> and <em>IdentityMapperSmart</em>. The None one is when an identity mapper has been declared for all connections and you explicitly wants none. The strict is very simple: instances are stored and retrieved from the mapper. If you delete an instance from the database, do not forget to unset it from the mapper as well or it will keep providing you with the deleted instance. The smart tries to be a bit more clever. If the instance it got is in the deleted state, it removes it. If the instance it helds has not been modified, values from a fetched objects are merged to the existing instance.</p>\n<p>Of course this does not recover from all the problems the IM can provide but this may be a good compromise in PHP where the goal of this design pattern is not so to limit the query number -- especially with Pomm where developers have a great control over the queries -- but to ensure to keep the existing instances consistent. I think Pomm has made its way to a stable release ... Stay tuned !</p>	t
rc4-and-tutorial-availability	RC4 and tutorial availability.	2012-02-02 11:34:03.577782	2012-02-02 11:34:03.577782	<p>I am really happy to announce Pomm's 4th release candidate version. A lot of work has been done since RC3 including lot of bug fixed and an transparent new filter chain for queries. This nice feature makes developers able to add code before and / or after each SQL query is sent to the database. The <em>LoggerFilter</em> is the first filter available but you can of course create yours.</p>\n<p> Another important news is there is now an <a href="http://www.coolkeums.org/en/article/pomm-a-concerto-for-php-and-postgresql.html">online tutorial</a> which can get you trough some Pomm's nicest features from scratch. It is a story of an adventure with XML, custom types, views and weather forecast. Hope you'll enjoy it. Take care.</p>	t
pomm-got-rid-of-fetch-all	Pomm got rid of fetch_all	2011-10-05 08:19:25.221868	2011-10-05 08:19:25.221868	This point was bugging me for too long. Collections used to be built with hydrated objects using a fetch_all. This caused very high memory consumption and low performances. It has been replaced using a PDO scrolling iterator. New collection system now hydrates objects on demand from the PDO statement. I did quick benchmarks on my small laptop with 100k records. It takes less than 2 minutes to hydrate and display everything with the old and new system but the new collection system uses 20Mbytes of RAM where the old one uses 200 ! This is a critical improvement in a web production environment. I want to do a bit more testing before going for another beta.	t
talks-at-phpforum-and-symfony-live-paris-2012	Talks at PHPForum and Symfony Live Paris 2012	2012-06-11 13:09:05.405893	2012-06-11 13:09:05.405893	<p>Hi, thanks to all who followed and participated to my talks about Postgresql and Pomm. There was a nice interest into Pomm and its philosophy so I tried to emphase in what Pomm was different than the classical dbal / orm usual approach.</p>\n<p>The slides for both presentations are online, here is the french <a href="http://pomm.coolkeums.org/phpforum/build/01-introduction.html">Tirer parti de Postgresql en PHP avec Pomm</a> held at the Php Forum. Here is the english <a href="http://pomm.coolkeums.org/sflive/build/01-introduction.html">What can Postgresql do for you</a> at the sf live.</p>\n<p>By the way, the <a href="http://www.coolkeums.org/en/article/pomm-a-concerto-for-php-and-postgresql.html">Concerto for PHP and Postgresql tutorial</a> has been corrected (code and backslashes glitches essentially).</p>\n	t
pomm-1-2-is-available	pomm 1.2 is available	2014-01-21 17:01:06.038852	2014-01-21 17:01:06.038852	\n<h2>Better, simpler, faster</h2>\n\n<p>The 1.2 branch was under development since April 2013 and it has been an interesting time. The heart of Pomm has been deeply remodelled to bring tremendous features and performances.</p>\n\n<ul>\n<li>Pomm uses PHP's native Postgresql API instead of PDO</li>\n<li>Configurable connections</li>\n<li>JSON, timestamp with timezone and composite types converter have been added</li>\n<li>Observer for LISTEN / NOTIFY support</li>\n<li>Prepared statement pooling</li>\n<li>Generic logger support (Monolog)</li>\n</ul>\n\n<p>Even though this sounds like a complete reshape, Pomm 1.2 is usable the same way as 1.1 but with added functionalities.</p>\n\n<p>The switch from PDO to native API showed great performances gain in addition to a better support of Postgresql features. Binary type is fully functional and asynchronous message system is supported. This also could lead to a simpler and better collection system. Prepared statements implementation has also been reworked. Every statement is prepared and pooled in a connection. If a statement is issued twice, the prepared statement is re-used without the developer to care about it.</p>\n\n<p>Converters have also been one of the centers of attention. Connections in Pomm 1.2 now configure database output to make the converter's code faster and more robust. Composite type converter is a big achievement making developers able to create complex types in the database and fetch them as PHP objects easily.</p>\n\n<p>There are tons of other little improvements crafted with this release (raw strings, multiple inserts, improved escaping etc.), they are in the <code>whatsnew</code> in the documentation attached with the project. In the same time, code quality has been greatly improved using both scrutinizer and SensioLabs' insight analyzing tool.</p>\n\n<h2>Migrating from 1.1</h2>\n\n<p>The PDO refactoring led to change the values placeholder in SQL queries, this means all custom SQL queries and <code>Where</code> clauses shall be modified to use <code>$*</code> instead of PDO's <code>?</code>. Migrating may just be it unless you use the filter chain or the remote fields formatters. Both have been removed with no replacement in 1.2. Since the logger has been changed to support generic PSR logger, there might be some adjustments in your development code to instantiate the logger. </p>\n\n<p>If your application benefits from Postgresql's JSON type, be aware the new JSON converters dumps a PHP associative array instead of a string with Pomm 1.1. Range type signature has also changed so if you used super class of these types, you should change the signature accordingly. \nthe blue box...</p>\n	t
pomm-1-1-3-is-out	Pomm 1.1.3 is out	2013-06-06 10:10:38.911727	2013-06-06 10:10:38.911727	\n<p>This is a bugfix release. It sums the work of <a href="https://github.com/adrienbrault">Adrien Brault</a>, <a href="https://github.com/eneault">Éric Neault</a> who made a great work for this release and <a href="https://github.com/FabienD">FabienD</a> for his work on PHP 5.5 compatibility. Huge thanks to them.</p>\n	t
conference-about-omm-and-pomm-at-the-french-pgday-2013	Conference about OMM and Pomm at the French PgDay 2013.	2013-04-17 11:37:03.875739	2013-04-17 11:37:03.875739	\n<p>I am happy to announce I have been selected to talk about OMMs and more particularly about Pomm at the French PgDay that will happen in Nantes the 13th of June.</p>\n\n<quote>une journée de conférences et d'échanges sur le thème du SGBDR open source PostgreSQL. Cette journée sera également l'occasion de rencontrer les acteurs de la communauté PostgreSQL.\n\nQue vous soyez DBA, architecte, développeur, chef de projet utilisant PostgreSQL, vous découvrirez des retours d'expérience d'autres utilisateurs, ainsi que des présentations techniques de PostgreSQL, de PostGIS (cartouche spatiale) ou d'autres extensions. Cette journée est organisée par la communauté francophone des utilisateurs de PostGreSQL, avec le soutien de plusieurs entreprises partenaires (SMILE, Dalibo).</quote>\n\n<p>You can subscribe now <a href="http://www.pgday.fr/inscriptions">here</a> if you are not scared by attending 9 high quality talks about PostgreSQL in French.</p> \n	t
php-tour-2012-in-nantes	PHP Tour 2012 in Nantes	2012-11-13 10:20:21.123012	2012-11-13 10:20:21.123012	\n<p>I am happy to announce I will be present at the <a href="http://afup.org/pages/phptournantes2012/">PHP Tour in Nantes</a> that will take place the 29th and the 30th of November.</p>\n<p>I will be happy to hopefully welcome you to an unconference if you wish to learn more about Pomm. See you there,,,</p>\n	t
presentation-about-postgresql-and-pomm-in-nantes	Presentation about Postgresql and Pomm in Nantes.	2012-10-19 12:21:46.037977	2012-10-19 12:21:46.037977	<p>I will be giving a presentation about all the Postgresql's goodness and how to use them in PHP with Pomm. The presentation will take place the 29th of October in Nantes. More information on the <a href="http://www.afup.org/pages/rendezvous/">AFUP's website</a>.</p><p>Hope to meet you there.</p>	t
go-beta	Go Beta !	2011-06-24 23:32:19.365609	2011-06-24 23:32:19.365609	<p>Pomm has evolved a lot during the last weeks and I am somewhat pleased of what it can do with Postgresql:</p>\n<ul>\n  <li>The converter system to take advantage of geographic, extended or custom composite types</li>\n  <li>Pomm even support embedded entities !</li>\n  <li>Smart methods to easily create the most common queries (including WHERE ... IN)</li>\n  <li>Use of PHP namespaces to deal with Postgesql's schemas</li>\n  <li>Database scanning and PHP code generation</li>\n  <li>You can extend Pomm in your model files with your own types, base classes etc</li>\n  <li>And it is still <strong>fast</strong>, <strong>simple</strong>, and <strong>efficient</strong></li>\n</ul>\n<p>These features have been coded based on the need I had while working on several little websites. A useful website using Pomm will be released soon, there will be a blog post about it. I think it is now time to slow down the changes and to use Pomm on bigger projects. This might be the right moment for Pomm to go beta.</p>	t
sflive-paris-2012-video-presentation-is-online	SfLive Paris 2012 video presentation is online.	2012-10-11 16:26:21.277914	2012-10-11 16:26:21.277914	<p>You can <a href="http://symfony.com/video/php-developers-what-can-postgresql-do-for-you/English">access the video from here.</a> Slides are <a href="http://pomm.coolkeums.org/sflive/build/01-introduction.html">also available</a> if you want to really see the slides while watching the presentation.</p><p>Thanks to Sensio and Fabien Potencier for organizing such a nice event.</p>	t
welcome-to-pomm-s-website	Welcome to Pomm's website	2011-06-14 10:22:22.969808	2011-06-14 10:22:22.969808	<p>And there are a lot to be said for this first news. Pomm has evolved a lot as I had to work on a <a href="http://www.silex-project.org">Silex</a> project.</p> <ul><li>The <i>Pomm</i> class with static methods is no more and replaced by a new <i>Service</i> class that integrates well with dependency injection containers if you use any.</il>\r<li>The old field types are deprecated and no more supported. They have been replaced by a more convenient <i>Converter</i> system that can be extended to implement your own database composite or enumerated types.</li>\r<li><b>Documentation is available</b> from this site and in a .rst format in the sources.</li>\r<li><i>Tools</i> were scanning the database to generate base map files, they still do of course but also generate the empty map and entity classes.</li></ul><p>The next step is to work on the <a href="http://www.symfony.com">Symfony 2</a> bundle. <br />Enjoy and stay tuned.</p>	t
views-are-now-supported	Views are now supported	2012-01-15 16:21:53.861601	2012-01-15 16:21:53.861601	<p>Hi ! <br />Well, there is not much more to say about this, views are considered by Pomm as normal tables so unless you specified rules on your views, you can expect your write attempts to fail on such objects.</p><p>The Inspector has also been extended so now it is possible to display stored procedures source code if available. Here is a little PHP script you can use on the command line to display the code. </p><script src="https://gist.github.com/1616300.js?file=show_sp_source.php"></script><p>It can be usefull to put the version of the SP in a comment in the source code so you can always know what's running in your database.</p><p>Take care !</p>	t
pomm-1-0-0-is-out	Pomm 1.0.0 is out !	2012-02-29 20:59:57.669702	2012-02-29 20:59:57.669702	\n<p>For this special occasion, this shiny new website showed up, great thanks to twitter guys and their bootstrap project, it is really aweswome.</p><p>As stated in the previous blog article, Postgresql is a superb relational database system that can let you deal with your data as objects. With that in mind, I started to play with objects and arrays but the converter system quickly showed limitations. The heart of <i>Pomm</i> has been recoded and now, it can handle arrays of objects containing arrays of objects.</p><p>The possibilities offered are immense as you still can benefit from the constraint and relational system to get data consistency and in the same time, issue queries that shape your data in a nice way and minimize the PHP complexity. The example of the query that returns the author and all his blog posts in an array illustrate how handy such method is coupled with <i>Pomm</i> converter system.</p><p>Even if the converter is one of the best features provided by <i>Pomm</i>, it should not hide others that help you along your developments: Collection and Pager classes, the fields methods, filters, Where class have all been coded because they were needed at one point.</p><p>This pragmatic approach makes <i>Pomm</i> the rapid development tool to empower your PHP script with all Postgresql goodnesses. The best being kept for the end, <i>Pomm</i> keeps you as close as possible to de database so your applications are faaaaaaaaaaaaaast whatever you make them in plain PHP or using a framework like <a href="http://silex.sensiolabs.org/">Silex</a> or <a href="http://symfony.com/">Symfony2</a>.</p><p>Take care and enjoy !</p>\n	t
pomm-1-1-4-is-out	Pomm 1.1.4 is out	2013-10-28 13:00:31.543735	2013-10-28 13:00:31.543735	\n<div id="preview_div">\n<p>I am happy to announce that 5 months after the previous version, Pomm 1.1.4 has been released this week end. It appeared a significant number of corrections justified a new version. The changelog contains the following:</p>\n<ul>\n<li>Bug in the string converter with empty string and NULL</li>\n<li>Lot of typos were found in the documentation</li>\n<li>Added missing method getMaxPerPage in the Pager class</li>\n<li>Bug in PDOFilter Exception</li>\n<li>Bug with intervals interpretation</li>\n</ul></div>\n	t
beta3-is-out	beta3 is out !	2011-09-01 07:46:17.265586	2011-09-01 10:00:33.205477	<p>The third beta version has been released. Fixes where mainly concerning the DSN.</p><p>I have been working in several projects using Pomm recently and I was pleased to see the time saved by using Postgresql's features and model automatic generation. I would like to hear your feedback, drop me an email !</p>	t
pomm-1-0-2-is-out	Pomm 1.0.2 is out	2012-05-03 11:06:44.56989	2012-05-03 11:06:44.56989	<p>I am happy to announce Pomm 1.0.2 release today. This release fixes several bugs, one of them regarding the PgEntity converter. Upgrading is highly recommended.</p>	t
a-mailing-list-is-now-available	A mailing list is now available.	2012-10-26 14:34:51.067884	2012-10-26 14:34:51.067884	<p>A <a href="https://groups.google.com/forum/?fromgroups#!forum/pommproject">mailing list</a> has been created on google groups because I received some emails asking me questions about Pomm on my private email or github issue and I thought these should profit to anyone interested.</p><p>Enjoy.</p>	t
feature-highlight-composite-types	feature highlight: composite types	2013-11-17 16:28:28.023727	2013-11-17 16:28:28.023727	\n<p><a href="http://www.postgresql.org/docs/9.3/static/rowtypes.html" title="Postgresql documentation">Composite type</a> is a way to represent structured data as part of other data. One example is user postal address. In a lot of cases, addresses are structured in a different table and programmers use a join to fetch the user with its address as an object. From a business perspective, address are never used alone so they should not have their own set. From a performance point of view, this join is really expensive as soon as there are search on every users living in a given city.\nAn other approach is to store directly address fields with the user, making the address indistinctly part of it. From a business perspective, this is bad because the attribute « zipcode » of the user is not a direct attribute. The good way is to create a <code>Address</code> object and grant users with it as attribute.</p>\n\n<script src="https://gist.github.com/chanmix51/7447181.js?file=address_type.sql"></script>\n\n<p>Doing so, requires the database layer to understand how to deal with database field output like</p>\n<pre><code>("27, route des fleurs", "61270", "RAI",)\n</code></pre>\n<p>Pomm 1.2 comes with a converter named <code>PgRow</code> to handle row fields. The converter must be fed with the structure of the expected row and it might also been told what class to use to instance an Address field type with the data provided by the database. If a type class is missing, data will be returned as array.</p>\n\n<script src="https://gist.github.com/chanmix51/7447181.js?file=pg_row.php"></script>\n\n<p>In the code above, the converter is told to create instances of `\\My\\Database\\Type\\AddressType\\ class with the converted data.</p>\n\n<script src="https://gist.github.com/chanmix51/7447181.js?file=AddressType.php"></script>\n\n<p>Pomm also comes with a generic (ie abstract) class for this kind of data type: the <code>Composite</code> type. Children of this class just have to declare as public attributes, the data to be exposed. Using it becomes as easy as:</p>\n\n<script src="https://gist.github.com/chanmix51/7447181.js?file=show_customers.php"></script>\n\n<p>Of course, it is possible to enrich this type class with getters and setters.</p>\n<h2 id="searching">Searching</h2>\n<p>Searching on one of the composite type's field is as easy as searching on any other fields of the customer's table. Say we want to fetch all the customers living in cities having more than 4 characters in a department with postal code starting with 44:</p>\n<pre><code>$customers = $map-&gt;findWhere("textlen((address).city) &gt; $* AND (address).postal_code ~ $*", array(4, '^44'), 'ORDER BY name LIMIT 10');\n</code></pre>\n<p>Enjoy.</p>\n	t
rc3-is-out	RC3 is out !	2012-01-11 10:53:45.89271	2012-01-11 10:53:45.89271	<p><strong>Happy new year</strong> faithful reader !</p><p>This release comes from some good developers had a look at Pomm's principles and design. The most important change concerns entity classes:<ul><li>They are now fully structure agnostic. They do not know what are the fields stored in the database nor what is their primary key as it is the <em>Map</em>'s job to do so.</li><li>Direct access to attributes triggers accessor overloads if they exist.</li><li>The <em>get()</em> accessor now accepts array of attributes as parameter.</li></ul></p><p>All these changes came from what we thought the best use of Pomm with sf2 form component was. Aside of that, a new <em>Inspector</em> class is born to relieve <em>Tools</em> classes from tedious queries and make them available for your own tools by example. Now more than ever Pomm needs to be tested on small projects, prototypes so we can expect a stable release ... soon :) Take care.</p>	t
feature-highlight-the-where-query-builder	Feature highlight: The Where query builder.	2013-07-09 11:59:09.591764	2013-07-09 11:59:09.591764	 \n<p>It often happens you can not know in advance what is the condition of your query going to be. Take by example the search form of an electronic part store web site. Just for the resistor component, the possible search criteria are:</p>\n<ul>\n<li>value in ohms from 0.1 to 10 million with more than 20 possible values in every power of ten.</li>\n<li>precision (0.1%, 1%, 5% and 10%)</li>\n<li>power dissipation from 0.125 to 100W</li>\n<li>type (carbon, metal, wire wound, cement, dissipated)</li>\n</ul>\n<p>A real shop would have more criteria than this but this is a good start since it already makes several thousand possible choices.</p>\n<p>Let's start with a simplistic (and unrealistic) approach that would make users to be able to select at most only one value of each field. The returned data is then an array of values formatted as follow:</p>\n<p>[ "value" =&gt; "2200", "precision" =&gt; "10", "power_dissipation" =&gt; "1", "type" =&gt; "metal" ]</p>\n<p>Needless to say these values <strong>MUST</strong> be validated and cleaned before being used for our database.</p>\n<p>Of course, less or even none of the values are possible. How to handle this search and the case no criteria is entered ? This is exactly what the <code>Where</code> class stands for.</p>\n<pre><code class="php">&lt;?php // /Store/Catalog/ResistorMap.php\n// ...\n\n    public function search(Array $criteria)\n    {\n        $where = new \\Pomm\\Query\\Where();\n\n        foreach ($criteria as $field =&gt; $value)\n        {\n            $where-&gt;andWhere(sprintf(&quot;%s = ?&quot;, $field), array($value));\n        }\n\n        return $this-&gt;query($where); // SELECT ... WHERE field1 = ? AND field2 = ? AND ...\n    }\n</code></pre>\n\n<p>This simple example shows how handy the <code>Where</code> class is. It handles the values for us and formats the where condition by itself. The issued query for the fields given in the array above would be :</p>\n<pre><code class="sql">SELECT \n  component_reference,\n  name,\n  value,\n  precision,\n  power,\n  type\nFROM\n  catalog.resistor\nWHERE\n    value = 2200\n  AND\n    precision = 10\n  AND\n    power_dissipation = 1\n  AND\n    type = 'metal'\n;\n</code></pre>\n\n<p>What if no criteria is passed to the search method ? The Where instance would have no criteria nor data and would issue the following query:</p>\n<pre><code class="sql">SELECT ... WHERE true;\n</code></pre>\n\n<p>The Postgresql's planner will instantly understand this where clause to be always true and discard it with no performance loss.</p>\n<p>What if we allow our user to select multiple values for each criteria ? The array returned by the form now looks like:</p>\n<pre><code>[ "value" =&gt; ["1000", "1200", "1500", "1800", "2000"], "precision" =&gt; [ "5", "1", "0.1" ], "power_dissipation" =&gt; [ "1" ], "type" =&gt; [ "metal", "wire wound" ] ]\n</code></pre>\n<p>This means we want all resistors with values of 1000 OR 1200 OR ... AND precision equals to 5 OR 1 OR 0.1 AND power_dissipation = 1 AND ...</p>\n<p>The search method becomes:</p>\n<pre><code class="php">&lt;?php // /Store/Catalog/ResistorMap.php\n// ...\n\n    public function search(Array $criteria)\n    {\n        $where = new \\Pomm\\Query\\Where();\n\n        foreach ($criteria as $field =&gt; $values)\n        {\n            $sub_where = new \\Pomm\\Where();\n\n            foreach ($values as $value)\n            {\n                $sub_where-&gt;orWhere(sprintf(&quot;%s = ?&quot;, $field), array($value));\n            }\n\n            $where-&gt;andWhere($sub_where);\n        }\n\n        return $this-&gt;query($where); // SELECT ... WHERE (field1 = ? OR field1 = ?) AND (field2 = ? OR ...\n    }\n</code></pre>\n\n<p>Note how the clause builder handles the logical precedence using parenthesis. Although this query is correct from a logical point of view, it creates a complex query the planner may not optimize well, it would be easier and better if using the <code>IN</code> SQL operator:</p>\n<pre><code class="php">&lt;?php // /Store/Catalog/ResistorMap.php\n// ...\n\n    public function search(Array $criteria)\n    {\n        $where = new \\Pomm\\Query\\Where();\n\n        foreach ($criteria as $field =&gt; $values)\n        {\n            $where-&gt;andWhere(\\Pomm\\Where()::createIn($field, $values));\n        }\n\n        return $this-&gt;query($where); // SELECT ... WHERE field1 IN (?, ?, ?) AND field2 IN (?, ?)\n    }\n</code></pre>\n\n<p>The good news is that the where class manages the variable number of values to escape.</p>\n<p>This method is probably good enough for the majority of catalog search but, knowing our business makes us able to do the things a bit better. We know by example a user would not look for all resistors of either 1000 or 2000 ohms but resistors between 1000 and 2000 ohms. On the same principle, a user would not look for resistors able to dissipate either 1W or 10W but all resistors between 1 and 10W.\nA simple javascript widget would make users able to select <em>ranges</em> of values sending only the first and the last value of the range. The form values would then be formatted like this:</p>\n<pre><code>[ "value" =&gt; ["1000", "2000"], "power_dissipation" =&gt; ["1", "10"] ]\n</code></pre>\n<pre><code class="php">&lt;?php // /Store/Catalog/ResistorMap.php\n// ...\n\n    public function search(Array $criteria)\n    {\n        $where = new \\Pomm\\Query\\Where();\n\n        foreach ($criteria as $field =&gt; $values)\n        {\n            $where-&gt;andWhere(sprintf(&quot;%s BETWEEN ? AND ?&quot;, $field), $values);\n        }\n\n        return $this-&gt;query($where); // SELECT ... WHERE field1 BETWEEN ? AND ? AND field2 BETWEEN...\n    }\n</code></pre>\n\n<p>A mix of this solution with the <code>IN</code> is required to handle the resistor type which cannot be set in a range. Talking about ranges, Postgresql 9.2 users would like to take advantage of the <code>range</code> type with operator as powerful as "overlap" or "adjacent". </p>\n\n	t
pomm-1-1-2-important-update-please-read-below	Pomm 1.1.2 - Important update, please read below.	2013-04-08 21:59:27.171718	2013-04-08 21:59:27.171718	\n<p>Pomm 1.1.2 is out. This version fixes 2 bugs. The first one was the Connection instance to create two different map instances -- using the `getMapFor()` method -- depending if the asked corresponding entity class name had leading backslash or not. This fix can speed up things and solve discrepancies that could occur when setting environment dependent changes in map classes.</p>\n\n<p>The second patch (submitted by <a href="https://github.com/jeremyFreeAgent">jeremyFreeAgent</a>) fixes a functional bug in the BaseObject class. Before this patch, as soon as a new getter was written, the attribute was declared to exist using the method `has()`. This behavior allowed inexistent attributes to be deleted using `clear()` that lead to an error.</p>\n\n<script src="https://gist.github.com/chanmix51/5339848.js?file=gistfile1.php"></script>\n\n<p>This behaviour is important because if you imagine the following entity:</p>\n\n<script src="https://gist.github.com/chanmix51/5339848.js?file=gistfile2.php"></script>\n\n<p>The `getMeMore()` getter returns the result of the division of A by B. If this getter is used when B equals 0, it will lead to an unguessable error since `hasMeMore()` would always return true by default. This makes developers to have to implement the corresponding `has` method when extending entities.</p>\n\n<p>Of course this change makes entities base accessors consistent: has(), set(), get(), clear() and add(), only manage values in entities internal container while your accessors do the rest.</p>\n\n<p>But this patch also changes the behavior of entities since calling `has('virtual_accessor')` now returns false even if a `hasVirtualAccessor()` method is declared in the according entity. This can lead to errors in existing applications especially in templates where these kind of tests are the more likely to be found. </p>\n\n<p>It is important to test your existing applications before deploying this release in production. You can set your `composer.json` to point to the 1.1.1 version while you take the time to ensure the change does not trigger any unwanted effects. </p>\n\n<p>Aside of that, Pomm had a very nice welcome from the Symfony live's audience where it has been presented last week and the project's activity has never been that high. Interesting times are ahead.</p>\n	t
pommbundle-up-to-date	PommBundle up to date	2011-06-17 11:06:27.946566	2011-06-17 11:06:27.946566	<p>The PommBundle has been deprecated for too long, it was time to make it work again. This is done. The bundle now works with the Pomm's Service class and the Tools have been refactored to integrate well with Symfony 2 command line tools.</p><p>The bundle is available on the download page.</p>	t
pomm-1-2-rc3-is-out	Pomm 1.2-RC3 is out	2013-11-22 10:23:47.086837	2013-11-22 10:23:47.086837	\n\n\n\n<p>Good news, it sounds final countdown to Pomm 1.2.0 is reaching its end. This third release candidate release proposes a cleaner source code by far, thanks to <a class="reference external" href="https://insight.sensiolabs.com/">SensioLabs insight(tm)</a> analysing tool. Although Pomm does not own any medal because of the <tt class="docutils literal">eval</tt> statement in the <tt class="docutils literal">HStore</tt> converter, it provided an deep and accurate analysis of the code that could lead to an efficient refactoring. Without this <tt class="docutils literal">eval</tt>, Pomm would earn a silver medal, this time because of the magic methods that animate the <tt class="docutils literal">BaseObject</tt> as flexible objects. These four points prevent Pomm's code source from being <a class="reference external" href="https://insight.sensiolabs.com/projects/5bff04e5-c391-4f91-850f-cf2b3110e222/analyses/5">rated platinum</a>. In an other hand, if Pomm followed admitted good practices, it would be an ORM.</p>\n<dl class="docutils">\n<dt>Since the RC2:</dt>\n<dd><ul class="first last simple">\n<li>timestamps with time zone are now supported.</li>\n<li>a new method appeared to handle aliases in the <tt class="docutils literal">getSelectFields</tt> like methods.</li>\n<li>a new converter for composite types has been implemented.</li>\n<li>composite types can be converted to objects using an abstract composite type.</li>\n<li>bugs in the prepared queries placeholder were fixed.</li>\n<li>code clean up.</li>\n</ul>\n</dd>\n</dl>\n<p>It is now time to use it and provide as much feedback as you can. Road to 1.2.0 is open.</p>\n	t
what-s-new-in-pomm-1-1	What's new in Pomm 1.1	2012-10-12 15:22:48.366056	2012-10-12 15:22:48.366056	\n<div class="body">\n<div class="section" id="what-s-new-in-pomm-1-1">\n<div class="section" id="postgres-9-2-types-support">\n<h3>Postgres 9.2 types support</h3>\n<p>Pomm now offers native converters for <strong>ranges</strong> (tsrange, int4range, int8range numrange) and <strong>Json</strong> types. It has better support for <strong>Interval</strong> type and you can directly set PHP <strong>DateTime</strong> instances as parameters of your prepared queries.</p>\n</div>\n<div class="section" id="more-handy-methods-for-your-controllers">\n<h3>More handy methods for your controllers</h3>\n<p>It benefits from Postgresql's <em>RETURNING</em> clause so you can directly write in the database and get the according instance:</p>\n<blockquote>\n<ul class="simple">\n<li><cite>$entity = $map-&gt;createAndSaveObject(array($form-&gt;getValues()))</cite></li>\n<li><cite>$entity = $map-&gt;updateByPk(array('id' =&gt; $form['id']), array('field_to_update' =&gt; $form['field_to_update'], ...))</cite></li>\n<li><cite>$array = $map-&gt;findAll()-&gt;extract();</cite></li>\n<li><cite>$collection = $map-&gt;findAll('ORDER BY created_at LIMIT 5');</cite></li>\n</ul>\n</blockquote>\n</div>\n<div class="section" id="better-entities-and-collections">\n<h3>Better entities and collections</h3>\n<p>The behavior of entities in 1.0 was unclear regarding field detection and NULL values. It was not really possible to delete a field from an entity instance. It is now possible with the <cite>$entity-&gt;clear('my_field')</cite> or <cite>$entity-&gt;clearMyField()</cite> or <cite>unset($entity['my_field'])</cite> method calls.</p>\n<p>The <cite>extract()</cite> method has been changed so it can also flatten any possible embed entities. This is desirable when by exemple dealing with web services to export everything in JSON format. The behavior of the old <cite>extract()</cite> method has been moved in the better named <cite>getFields()</cite> method.</p>\n<p>The Collection had some improvements too. In 1.0, the use of scrollable cursors has been abandoned because this was too obtrusive from a SQL perspective. To be able to scroll on result sets more than once, the Collection system had to cache all the fetched results that could lead to a huge memory consumption. There is a new <cite>SimpleCollection</cite> class that just implements a non rewindable iterator. It does not support hydration filters nor cachine, it just let you foreach once over results as fast as PHP can, which is what you want 99.9% of the time. The <cite>Collection</cite> class is still here providing the same features as 1.0 and it is still the default collection used by Pomm 1.1. You can switch to <cite>SimpleCollection</cite> or whatever other <cite>Iterator</cite> implementation you want just by overloading your map classes <cite>createCollectionFromStatement()</cite> method.</p>\n<p>To end with <cite>Collection</cite> class, all the filter methods now implement the fluid interface so you can register filters and return results without using temporary variable:</p>\n<pre class="literal-block">return $this-&gt;query($sql, $values)\n    -&gt;resetFilters()\n    -&gt;registerFilter($callable1)\n    -&gt;registerFilter($callable2)\n    ;\n</pre>\n</div>\n<div class="section" id="fields-getters-are-awesome">\n<h3>Fields getters are awesome</h3>\n<p>The <cite>getFields()</cite> methods family is one of the coolest features of Pomm allowing developers to add their own fields to all or just in one query. In an other hand, it was tedious to filter fields not to fetch some of them (passwords, technical fields etc.). Fields are now handled as an associative array in the map class with the key becoming the SQL field's alias name so it is now easy to filter fields with PHP's <cite>array_filter</cite> or <cite>array_map</cite> functions.</p>\n<p>Aside of that, it is tedious to always have to</p>\n<pre class="literal-block">join(', ', $map-&gt;getSelectFields(...\n</pre>\n<p>to nicely format SQL queries. Pomm 1.1 comes with two formatters <cite>formatFields</cite> and <cite>formatFieldsWithAlias</cite>. These formatters take a getField method name as first argument. They use it to get the fields and format the output as a string to fit your SQL queries.</p>\n<pre class="literal-block">echo $this-&gt;formatFieldsWithAlias('getFields', 'pika');\n\n"pika.field1" AS "field1", "pika.field2" AS "field2", ...\n</pre>\n<p>There is also the field getters triggered by <em>Collection filters</em>. This was noted as deprecated in the 1.0 version. It is finally kept in the 1.1 version because it may be desirable to split a non nested result set in several entities.</p>\n</div>\n<div class="section" id="generation-tools-are-not-forgotten">\n<h3>Generation tools are not forgotten</h3>\n<p>The 1.0 tools lacked output when used from the command line. There is now a <cite>OutputStack</cite> that manage output messages. Generated schemas and namespaces can be formatted the way you want using a placeholder syntax. It is also now possible to exclude tables from a schema generation task (useful with <a class="reference external" href="https://github.com/joelonsql/PgDeploy">PgDeploy</a> by example).</p>\n</div>\n<div class="section" id="the-last-but-not-the-least">\n<h3>The last but not the least</h3>\n<p>The first task toward the 1.1 version has been to rewrite the whole test suite using PHPUnit. It is now easier to develop features and add the according tests as PHPUnit is very standard in the PHP world. This also makes Pomm testable with Travis the open source continuous integration service. The first side effect of this rewrite has been to spot numerous little bugs and put light on some inconsistent behaviors. Few of them still remain today (ie binary string to Pg's bytea type conversion) but the vast majority have been fixed. Most of those corrections were also backported to the 1.0 branch.</p>\n</div>\n</div>\n<div class="section" id="migrating-from-1-0-to-1-1">\n<h1>Migrating from 1.0 to 1.1</h1>\n<p>Migrating from 1.0 to 1.1 should not be a hassle, here is a list of points that break compatibility between 1.0 and 1.1:</p>\n<div class="section" id="pgentity-refactoring">\n<h3>PgEntity refactoring</h3>\n<p><cite>PgEntity</cite> converter's constructor now takes a <cite>BaseObjectMap</cite> instance as argument instead of <cite>Database</cite> and the class name:</p>\n<pre class="literal-block">// 1.0\n$database-&gt;registerConverter(\n    'WeatherProbe',\n    new Pomm\\Converter\\PgEntity($database, '\\Db\\Weather\\WeatherProbe'),\n    array('weather_probe')\n    );\n\n// 1.1\n$database-&gt;registerConverter(\n    'WeatherProbe',\n    new Pomm\\Converter\\PgEntity($weather_probe_map),\n    array('weather_probe')\n    );\n</pre>\n<p>This is very useful if you want <cite>PgEntity</cite> to deal with a map class that is custom made with extra virtual fields or filters.</p>\n<p><a class="reference external" href="https://github.com/chanmix51/Pomm/issues/30">See the related ticket #30</a>.</p>\n</div>\n<div class="section" id="executeanonymousquery">\n<h3>executeAnonymousQuery</h3>\n<p>This method is now a Connection instance method instead of a Database instance method. <a class="reference external" href="https://github.com/chanmix51/Pomm/issues/29">See the related ticket #29</a>.</p>\n</div>\n<div class="section" id="entity-getter">\n<h3>Entity getter</h3>\n<p>The <cite>get($field)</cite> entity's method throws an exception when the field does not exist in 1.1. In 1.0, the behavior was to return NULL which lead to bugs with typos in method names being silently ignored.</p>\n<p><a class="reference external" href="https://github.com/chanmix51/Pomm/issues/48">See the related ticket #48</a>.</p>\n</div>\n</div>\n </div>\n	t
pomm-1-2-rc2-is-out	Pomm 1.2-RC2 is out	2013-11-05 09:50:30.771766	2013-11-05 09:50:30.771766	<p>We are pleased to inform you the "1.2-RC2" release has been tagged last night. It is somehow unusual to see a Release Candidate version to propose new features, but as this shiny new version of Pomm has been tested on development sites, it appeared we were two fingers from some useful functionalities it would have been foolish not to craft Pomm 1.2 with.</p>\n<p>One of the most missed features from any other database framework is the Postgresql's asynchronous message system (LISTEN / NOTIFY). This makes programmer able to use the database as event dispatcher to trigger asynchronous and parallel jobs.</p>\n<p>Another missing feature was the ability to save several objects in one move. The <code>createAndSaveObjects()</code> map class's method takes an array of value sets, saves it to the database using one INSERT and returns directly a collection of entities. This is particularly handy when dealing with web services or CSV files.</p>\n<p>Aside of these functionalities, some bugs were fixed, the test coverage has been extended to include PHP 5.3 and Postgresql from version 9.0. The main documentation has been updated. </p>\n<p>Proof readers and testers welcome !</p>	t
the-real-1-0-6-is-out	The real 1.0.6 is out.	2012-10-19 12:12:55.213947	2012-10-19 12:12:55.213947	<p>I am happy to announce the immediate release of Pomm 1.0.6. The previously announced 1.0.6 on this website was a mistaken 1.0.5.</p><p>This release fix several bugs in the converter system especially when entities and arrays were combined together. The HStore converter has also been enhanced (like the 1.1) and is now faster while being by far less restrictive on key names.</p> 	t
pommguard-new-extension-for-silex	PommGuard: New extension for Silex.	2012-03-22 20:04:06.489899	2012-03-22 20:04:06.489899	 <p>I am happy to release a new service provider for the <a href="http://silex.sensiolabs.org/">Silex µ-framework</a>. <a href="http://packagist.org/packages/ghub/pomm-guard-service-provider">PommGuardServiceProvider</a> is an authentication and authorization manager that provides \n<ul>\n  <li>simple mechanisms to protect your controllers using the new <a href="http://silex.sensiolabs.org/doc/usage.html#route-middlewares">route middlewares feature</a></li>\n  <li>users, groups and credentials</li>\n  <li>out of the box simple solution</li>\n</ul></p>\n<p>One of the greatest strength of that system is <em>extensibility</em>. Using Postgres inheritance, you can easily extend given users and groups to create your own profiles. See the <a href="https://github.com/chanmix51/PommGuardServiceProvider">documentation</a> for more details. Enjoy.</p>	t
major-bugfix-and-code-examples	Major bugfix and code examples.	2011-11-20 20:02:51.073883	2011-11-20 20:02:51.073883	\n<p>An important bug concerning the model files generation has been fixed. Pomm uses the schema name as namespace for the model files but <em>Public</em> is a PHP protected word. The public schema namespace will now be <em>PublicSchema</em>.</p>\n<p>There is now <a href="/documentation/examples"> an example section</a> in <a href="/documentation">the documentation</a> all good ideas are welcome.</p>	t
pommserviceprovider-available	PommServiceProvider available.	2011-10-07 15:00:00.057806	2011-10-07 15:00:00.057806	The Silex µFramework has evolved. A distinction has been made between extensions that register services and extensions that contain controllers. You can now use the PommServiceProvider with the latest version of this nice, fast and efficient framework. See the README for details on the new way to register the provider. <br />Cheers !	t
conference-about-pomm-silex-and-symfony-at-the-symfony-live-paris-2013	Conference about Pomm, Silex and Symfony at the Symfony Live Paris 2013.	2013-03-12 14:33:44.855741	2013-03-12 14:33:44.855741	\n<p>I will talk (in French) about Pomm at the <a href="http://paris2013.live.symfony.com/speakers">Symfony live</a> between the 2nd and the 6th of April in Paris. The conference will be about Pomm integration in developments using Silex or Symfony. Practical examples will be provided to show how the leverage Postgresql's power from your web applications.</p>\n\n<p>As I am still preparing the conference, if there is something you think that should be mentioned (real life example, feedback etc.), feel free to poke me or let a comment below.</p>\n\n<p>Of course, I will be happy to meet anybody with interest into Pomm in Paris during this time, see you there !</p>\n	t
the-final-cut	The final cut	2012-02-19 13:04:44.753939	2012-02-19 13:04:44.753939	<p>I thought Pomm was ready to go for stable release but I has a feeling maybe something was missing. I was wrong, there was too much. As I stated in <a href="http://www.coolkeums.org/en/article/your-queries-will-never-be-the-same-again.html">this blog article</a>, Postgresql <em>can manage your tables as objects</em>:</p>\n\n<script src="https://gist.github.com/1863642.js?file=objects.sql"></script>\n\n<p>This syntax is so powerful it makes use of ORMs almost useless with Postgresql as you can shape you queries to retrieve related objects directly. To benefit from this, I introduce the <em>virtual fields</em> feature in the latest commit. This makes you able to associate a select extra field with a converter, even an entity converter. In the example below, adding a virtual field named <code>posts</code> associated with a <code>Post[]</code> entity converter will automatically hydrate your <code>Author</code> instance with an array of <code>Post</code> under the <code>posts</code> accessor.</p><p>This means I will work on updating the documentation and the tutorials using this feature in place of the remote fields. Adding the virtual fields feature was something like 5 lines of code and it makes the remote collection obsolete. This code will disappear from the next release, it is always good to see when adding just a bit of code can reduce the code size.</p><p>Stay tuned, more to come soon.</p>	f
2-years-of-pomm	2 years of Pomm	2013-01-10 10:13:51.840163	2013-01-10 10:13:51.840163	\n<p>Formerly, it was <a href="">sfPgLookPlugin</a>, a symfony1 plugin. The 10th January 2011, <a href="https://github.com/chanmix51/Pomm/tree/c437c765f407459dd35594dc151c32140e8315f8">Pomm's first commit</a> was pushed to Github. Since this day, Pomm has evolved based on the needs of real world projects.</p>\n<p>Its first feature -- alongside being an object model manager -- was the converter, because 't' and 'f' were pretty poor boolean in PHP. After that, came the need of being able to deal with custom types hence database objects, data mapper, database inspector, inheritance support and so on.</p>\n<p>It is still a great pleasure to use Pomm in today's professional projects. It allows to set up very quickly models based on complex database structures and wrap PHP around Postgresql's features. It has often been a question from people hearing about Pomm for the first time: "Are you saying we should set business logic in the database ?". Of course they are no universal good answer to that, I use to say "It depends how frequently your business rules change". I use to store slugification, password hashing, list ordering in the database because these tend not to change over time and it makes my PHP layer simpler to assume the database is doing the job. This would also work for every application or script using the database.</p>\n<p>There are today two versions of Pomm, 1.1 being the latest stable. Thank you to all people who did participate with their feedback, emails, bugs submission or push request. 1.0 version will be maintained for bugs and security issues until 1st of March. The 1.1 version will then be the stable version until a 2.0 version comes out.</p>\n	t
pomm-1-1-1-is-out	Pomm 1.1.1 is out.	2013-02-12 14:19:00.53107	2013-02-12 14:19:00.53107	\n<p>This is a maintenance release.</p><p>It fixes an annoying bug in the maps classes remote collection filter.</p><p>Since Pomm has been tested on amazon cloud, it appeared the dash character was not allowed in DSN. This is now fixed.</p>\n	t
a-new-tutorial-for-pomm	A new tutorial for Pomm	2013-02-25 20:48:49.838977	2013-02-25 20:48:49.838977	\n<p>I am happy to announce the availability of a <a href="https://github.com/chanmix51/elcaro/tree/english">new tutorial</a> for Pomm. It has been a very interesting collaborative work with <a href="https://github.com/jubianchi">Julien Bianchi</a>, <a href="https://github.com/sanpii">Nicolas Joseph</a> and <a href="https://github.com/pborreli">Pascal Borreli</a>. </p>\n<p>With a simple example of employees belonging to departments, we can go trough several of Pomm's nice features like elastic objects and fields formatters while writing a Postgresql recursive query.</p>\n<p>The feedback we have about it mention it takes a couple of hours to get it done and people feel confident to go for a Silex or Symfony project using Pomm after the tutorial. So far so good. Enjoy !</p>\n	t
rc2-is-out	RC2 is out !	2011-12-04 15:06:58.113806	2011-12-04 15:06:58.113806	<p>Lot of good things happened this week. The first good news is the Model files are now in a namespace containing both <strong>database name</strong> and <strong>schema name</strong> to ovoid collision on objects stored in different databases but same schema (public). The way the model files are generated is now completely free, no more mandatory <em>Model\\Pomm\\Entities</em>. It is your decision to store the model files in a strategic place.</p><p>The second good news is <strong>the bytea postgresql type now has its own converter</strong>. You can store images, sound or whatever in the database and retrieve it through your preferred non ORM. As we are talking about converters, the <em>tsvector</em> type is now associated to <em>String</em>. Theses changes allowed us to generate the model for <a href="http://pgfoundry.org/frs/?group_id=1000150">the Pagila database</a>, one of the sample databases that can be found on PgFoundry. That's a big win because this database uses a lot of Pg features.</p><p>The changes in the <em>ScanSchemaTool</em> broke the compatibility in the <a href="https://github.com/chanmix51/PommBundle">PommBundle</a> and the <a href="https://github.com/chanmix51/PommServiceProvider">Silex PommServiceProvider</a>, so be sure to upgrade them if you upgrade Pomm.</p><p>Thanks to <a href="https://github.com/docteurklein">Dr Klein</a> for the very valuable work he did. Take care and enjoy !</p>	t
pomm-1-0-3-is-out-and-development-branch-forked-to-1-1	Pomm 1.0.3 is out and development branch forked to 1.1	2012-05-31 08:42:16.405929	2012-05-31 08:42:16.405929	<p>The last revisions of Pomm 1.0.x did fix some serious limitations about the field content size in arrays or entities. It sounds Pomm can now handle content up to the maximum default size allowed by postgresql in a faster way. The 1.0 branch will now continue its life, only bugs and security issues will be fixed on this branch. This ensures the documentation to be up to date and you to be able to easily migrate from one minor to another without facing problems.</p>\n<p>In the same time, the master branch will add new features as there are already some requests pending in github. Do not hesitate to express yourself on what you would like to add to or remove from Pomm.</p>	t
2-talks-about-postgres-and-pomm-in-june-2012	2 talks about Postgres and Pomm in June 2012	2012-04-11 18:50:55.65792	2012-04-11 18:50:55.65792	<p>I am really happy to announce I am going to talk about Postgresql during the <a href="http://paris2012.live.symfony.com/speakers">Symfony live 2012 in Paris</a>. While this conference will be mostly about how to take advantage of Pg features in web development I will finish it with presenting Pomm. This talk will be in English and the sf live is planned on 7-8th of June. In case you would be more interested into Pomm, I will also participate to <a href="http://afup.org/pages/forumphp2012/">the PHP forum in Paris</a>. Even thought the conference is at the same place (Cité universitaire de Paris) this one will be in French and 2 days before (5-6th of June).</p> \n<p>More info on this blog later...</p>	f
\.


--
-- Data for Name: old_news; Type: TABLE DATA; Schema: pomm; Owner: -
--

COPY old_news (slug, title, created_at, published_at, content, accept_comments) FROM stdin;
pomm-1-1-2-important-update-please-read-below	Pomm 1.1.2 - Important update, please read below.	2013-04-08 21:59:27.171718	2013-04-08 21:59:27.171718	\n<p>Pomm 1.1.2 is out. This version fixes 2 bugs. The first one was the Connection instance to create two different map instances -- using the `getMapFor()` method -- depending if the asked corresponding entity class name had leading backslash or not. This fix can speed up things and solve discrepancies that could occur when setting environment dependent changes in map classes.</p>\n\n<p>The second patch (submitted by <a href="https://github.com/jeremyFreeAgent">jeremyFreeAgent</a>) fixes a functional bug in the BaseObject class. Before this patch, as soon as a new getter was written, the attribute was declared to exist using the method `has()`. This behavior allowed inexistent attributes to be deleted using `clear()` that lead to an error.</p>\n\n<script src="https://gist.github.com/chanmix51/5339848.js?file=gistfile1.php"></script>\n\n<p>This behaviour is important because if you imagine the following entity:</p>\n\n<script src="https://gist.github.com/chanmix51/5339848.js?file=gistfile2.php"></script>\n\n<p>The `getMeMore()` getter returns the result of the division of A by B. If this getter is used when B equals 0, it will lead to an unguessable error since `hasMeMore()` would always return true by default. This makes developers to have to implement the corresponding `has` method when extending entities.</p>\n\n<p>Of course this change makes entities base accessors consistent: has(), set(), get(), clear() and add(), only manage values in entities internal container while your accessors do the rest.</p>\n\n<p>But this patch also changes the behavior of entities since calling `has('virtual_accessor')` now returns false even if a `hasVirtualAccessor()` method is declared in the according entity. This can lead to errors in existing applications especially in templates where these kind of tests are the more likely to be found. </p>\n\n<p>It is important to test your existing applications before deploying this release in production. You can set your `composer.json` to point to the 1.1.1 version while you take the time to ensure the change does not trigger any unwanted effects. </p>\n\n<p>Aside of that, Pomm had a very nice welcome from the Symfony live's audience where it has been presented last week and the project's activity has never been that high. Interesting times are ahead.</p>\n	t
pomm-1-1-0-rc2-is-out	Pomm 1.1.0-RC2 is out	2012-10-30 13:19:18.150559	2012-10-30 13:19:18.150559	<p>After a one month test period, some bugs have been fixed and the identity mapper has been re factored to a simplest and more maintainable implementation. This version has been rewritten with in mind the fact that the identity mapper is not a cache to prevent some queries to be done. It is instead the only method to ensure the same object fetched twice from the database will be represented as a single instance in PHP.</p>\n<p>The <a href="http://pdepend.org/">PHP Depend</a> code analyzer has been run against Pomm sources. The results are shown hereafter:</p><p><img src="/images/pyramid.svg"><em>Overview pyramid</em></p>\n<p>The <a href="http://pdepend.org/documentation/handbook/reports/overview-pyramid.html">overview pyramid</a> shows a number of interesting statistics about how healthy Pomm's code is:\n<ul>\n  <li>The cyclomatic ratio is 0.216 which is average.</li>\n  <li>Code encapsulation is good with an average of a bit more than 11 lines of code per method.</li>\n  <li>Another indicator of encapsulation is the average of 6.3 methods per class, so far so good.</li>\n  <li>The classes per package ratio is a bit low indicating Pomm could grow.... it is not the goal as we want to keep it performance wise.</li>\n  <li>The inheritance indicators still show low complexity in heirs tree.</li>\n  <li>Each method is called by an average of 2.7 times in the code which is good.</li>\n  <li>The low FANOUT/CALLS indicators show each package does not export its complexity outside itself, which is excellent.</li>\n</ul>\n  <p>The coupling indicators are very important as they show how the KISS principles are respected hence make the application maintainable and stable over time. Of course these numbers are to be balanced with the fact Pomm is a little project (approx 11k lines of code) and the values are average with no indication about the variance.</p>\n  <p>Another statistic not dumped by PHPDepend is the test coverage. Theoretically, the number of unit tests should equals the total cyclomatic complexity to ensure every path of the running code is tested. This would mean Pomm should have 955 test assertions to pretend a test coverage of 100%, the actual number of tests are 396. Here again, precaution must be observed as we have no information about the repartition of the test coverage. Some parts may be very well tested whereas some other are poorly covered. A closer look would show that CYLO of the converter system is 78 and there are actually 118 test assertions on this part. In the Tools package, the cyclomatic complexity is a mere 104 and there are only 12 unit tests on this part.</p>\n<p>Last thing: I had excellent feedbacks about the conferences I gave in Paris and Nantes about Postgresql and Pomm. Many thanks to people who got interested into this project, some of them did even post PRs on github. Thank you !</p>	f
the-final-cut	The final cut	2012-02-19 13:04:44.753939	2012-02-19 13:04:44.753939	<p>I thought Pomm was ready to go for stable release but I has a feeling maybe something was missing. I was wrong, there was too much. As I stated in <a href="http://www.coolkeums.org/en/article/your-queries-will-never-be-the-same-again.html">this blog article</a>, Postgresql <em>can manage your tables as objects</em>:</p>\n\n<script src="https://gist.github.com/1863642.js?file=objects.sql"></script>\n\n<p>This syntax is so powerful it makes use of ORMs almost useless with Postgresql as you can shape you queries to retrieve related objects directly. To benefit from this, I introduce the <em>virtual fields</em> feature in the latest commit. This makes you able to associate a select extra field with a converter, even an entity converter. In the example below, adding a virtual field named <code>posts</code> associated with a <code>Post[]</code> entity converter will automatically hydrate your <code>Author</code> instance with an array of <code>Post</code> under the <code>posts</code> accessor.</p><p>This means I will work on updating the documentation and the tutorials using this feature in place of the remote fields. Adding the virtual fields feature was something like 5 lines of code and it makes the remote collection obsolete. This code will disappear from the next release, it is always good to see when adding just a bit of code can reduce the code size.</p><p>Stay tuned, more to come soon.</p>	f
conference-about-omm-and-pomm-at-the-french-pgday-2013	Conference about OMM and Pomm at the French PgDay 2013.	2013-04-17 11:37:03.875739	2013-04-17 11:37:03.875739	\n<p>I am happy to announce I have been selected to talk about OMMs and more particularly about Pomm at the French PgDay that will happen in Nantes the 13th of June.</p>\n\n<quote>une journée de conférences et d'échanges sur le thème du SGBDR open source PostgreSQL. Cette journée sera également l'occasion de rencontrer les acteurs de la communauté PostgreSQL.\n\nQue vous soyez DBA, architecte, développeur, chef de projet utilisant PostgreSQL, vous découvrirez des retours d'expérience d'autres utilisateurs, ainsi que des présentations techniques de PostgreSQL, de PostGIS (cartouche spatiale) ou d'autres extensions. Cette journée est organisée par la communauté francophone des utilisateurs de PostGreSQL, avec le soutien de plusieurs entreprises partenaires (SMILE, Dalibo).</quote>\n\n<p>You can subscribe now <a href="http://www.pgday.fr/inscriptions">here</a> if you are not scared by attending 9 high quality talks about PostgreSQL in French.</p> \n	t
pomm-1-1-3-is-out	Pomm 1.1.3 is out	2013-06-06 10:10:38.911727	2013-06-06 10:10:38.911727	\n<p>This is a bugfix release. It sums the work of <a href="https://github.com/adrienbrault">Adrien Brault</a>, <a href="https://github.com/eneault">Éric Neault</a> who made a great work for this release and <a href="https://github.com/FabienD">FabienD</a> for his work on PHP 5.5 compatibility. Huge thanks to them.</p>\n	t
feature-highlight-the-where-query-builder	Feature highlight: The Where query builder.	2013-07-09 11:59:09.591764	2013-07-09 11:59:09.591764	 \n<p>It often happens you can not know in advance what is the condition of your query going to be. Take by example the search form of an electronic part store web site. Just for the resistor component, the possible search criteria are:</p>\n<ul>\n<li>value in ohms from 0.1 to 10 million with more than 20 possible values in every power of ten.</li>\n<li>precision (0.1%, 1%, 5% and 10%)</li>\n<li>power dissipation from 0.125 to 100W</li>\n<li>type (carbon, metal, wire wound, cement, dissipated)</li>\n</ul>\n<p>A real shop would have more criteria than this but this is a good start since it already makes several thousand possible choices.</p>\n<p>Let's start with a simplistic (and unrealistic) approach that would make users to be able to select at most only one value of each field. The returned data is then an array of values formatted as follow:</p>\n<p>[ "value" =&gt; "2200", "precision" =&gt; "10", "power_dissipation" =&gt; "1", "type" =&gt; "metal" ]</p>\n<p>Needless to say these values <strong>MUST</strong> be validated and cleaned before being used for our database.</p>\n<p>Of course, less or even none of the values are possible. How to handle this search and the case no criteria is entered ? This is exactly what the <code>Where</code> class stands for.</p>\n<pre><code class="php">&lt;?php // /Store/Catalog/ResistorMap.php\n// ...\n\n    public function search(Array $criteria)\n    {\n        $where = new \\Pomm\\Query\\Where();\n\n        foreach ($criteria as $field =&gt; $value)\n        {\n            $where-&gt;andWhere(sprintf(&quot;%s = ?&quot;, $field), array($value));\n        }\n\n        return $this-&gt;query($where); // SELECT ... WHERE field1 = ? AND field2 = ? AND ...\n    }\n</code></pre>\n\n<p>This simple example shows how handy the <code>Where</code> class is. It handles the values for us and formats the where condition by itself. The issued query for the fields given in the array above would be :</p>\n<pre><code class="sql">SELECT \n  component_reference,\n  name,\n  value,\n  precision,\n  power,\n  type\nFROM\n  catalog.resistor\nWHERE\n    value = 2200\n  AND\n    precision = 10\n  AND\n    power_dissipation = 1\n  AND\n    type = 'metal'\n;\n</code></pre>\n\n<p>What if no criteria is passed to the search method ? The Where instance would have no criteria nor data and would issue the following query:</p>\n<pre><code class="sql">SELECT ... WHERE true;\n</code></pre>\n\n<p>The Postgresql's planner will instantly understand this where clause to be always true and discard it with no performance loss.</p>\n<p>What if we allow our user to select multiple values for each criteria ? The array returned by the form now looks like:</p>\n<pre><code>[ "value" =&gt; ["1000", "1200", "1500", "1800", "2000"], "precision" =&gt; [ "5", "1", "0.1" ], "power_dissipation" =&gt; [ "1" ], "type" =&gt; [ "metal", "wire wound" ] ]\n</code></pre>\n<p>This means we want all resistors with values of 1000 OR 1200 OR ... AND precision equals to 5 OR 1 OR 0.1 AND power_dissipation = 1 AND ...</p>\n<p>The search method becomes:</p>\n<pre><code class="php">&lt;?php // /Store/Catalog/ResistorMap.php\n// ...\n\n    public function search(Array $criteria)\n    {\n        $where = new \\Pomm\\Query\\Where();\n\n        foreach ($criteria as $field =&gt; $values)\n        {\n            $sub_where = new \\Pomm\\Where();\n\n            foreach ($values as $value)\n            {\n                $sub_where-&gt;orWhere(sprintf(&quot;%s = ?&quot;, $field), array($value));\n            }\n\n            $where-&gt;andWhere($sub_where);\n        }\n\n        return $this-&gt;query($where); // SELECT ... WHERE (field1 = ? OR field1 = ?) AND (field2 = ? OR ...\n    }\n</code></pre>\n\n<p>Note how the clause builder handles the logical precedence using parenthesis. Although this query is correct from a logical point of view, it creates a complex query the planner may not optimize well, it would be easier and better if using the <code>IN</code> SQL operator:</p>\n<pre><code class="php">&lt;?php // /Store/Catalog/ResistorMap.php\n// ...\n\n    public function search(Array $criteria)\n    {\n        $where = new \\Pomm\\Query\\Where();\n\n        foreach ($criteria as $field =&gt; $values)\n        {\n            $where-&gt;andWhere(\\Pomm\\Where()::createIn($field, $values));\n        }\n\n        return $this-&gt;query($where); // SELECT ... WHERE field1 IN (?, ?, ?) AND field2 IN (?, ?)\n    }\n</code></pre>\n\n<p>The good news is that the where class manages the variable number of values to escape.</p>\n<p>This method is probably good enough for the majority of catalog search but, knowing our business makes us able to do the things a bit better. We know by example a user would not look for all resistors of either 1000 or 2000 ohms but resistors between 1000 and 2000 ohms. On the same principle, a user would not look for resistors able to dissipate either 1W or 10W but all resistors between 1 and 10W.\nA simple javascript widget would make users able to select <em>ranges</em> of values sending only the first and the last value of the range. The form values would then be formatted like this:</p>\n<pre><code>[ "value" =&gt; ["1000", "2000"], "power_dissipation" =&gt; ["1", "10"] ]\n</code></pre>\n<pre><code class="php">&lt;?php // /Store/Catalog/ResistorMap.php\n// ...\n\n    public function search(Array $criteria)\n    {\n        $where = new \\Pomm\\Query\\Where();\n\n        foreach ($criteria as $field =&gt; $values)\n        {\n            $where-&gt;andWhere(sprintf(&quot;%s BETWEEN ? AND ?&quot;, $field), $values);\n        }\n\n        return $this-&gt;query($where); // SELECT ... WHERE field1 BETWEEN ? AND ? AND field2 BETWEEN...\n    }\n</code></pre>\n\n<p>A mix of this solution with the <code>IN</code> is required to handle the resistor type which cannot be set in a range. Talking about ranges, Postgresql 9.2 users would like to take advantage of the <code>range</code> type with operator as powerful as "overlap" or "adjacent". </p>\n\n	t
pomm-got-rid-of-fetch-all	Pomm got rid of fetch_all	2011-10-05 08:19:25.221868	2011-10-05 08:19:25.221868	This point was bugging me for too long. Collections used to be built with hydrated objects using a fetch_all. This caused very high memory consumption and low performances. It has been replaced using a PDO scrolling iterator. New collection system now hydrates objects on demand from the PDO statement. I did quick benchmarks on my small laptop with 100k records. It takes less than 2 minutes to hydrate and display everything with the old and new system but the new collection system uses 20Mbytes of RAM where the old one uses 200 ! This is a critical improvement in a web production environment. I want to do a bit more testing before going for another beta.	t
pommserviceprovider-available	PommServiceProvider available.	2011-10-07 15:00:00.057806	2011-10-07 15:00:00.057806	The Silex µFramework has evolved. A distinction has been made between extensions that register services and extensions that contain controllers. You can now use the PommServiceProvider with the latest version of this nice, fast and efficient framework. See the README for details on the new way to register the provider. <br />Cheers !	t
pomm-1-2-is-on-the-launchpad	Pomm 1.2 is on the launchpad	2013-09-16 17:57:09.931758	2013-09-16 17:57:09.931758	\n<div class="body">\n<p>9 months after the 1.1 release, the first release candidate of the 1.2 version is out. This kind of blog posts often mention that is has been a tough work to make this release to happen but, here, it is not the case. The main word of this release was "Keep It Stupid and Simple" and as such, time has been taken to ensure chosen solutions were the best fit.</p>\n<div class="section" id="pomm-now-uses-php-s-native-postgresql-api">\n<h3>Pomm now uses PHP's native Postgresql API</h3>\n<p>And this is a huge improvement ! The first thought is going to speed gain this change triggers. But this also makes the converters to be simplest and more efficient in addition of making the binary converter to fully support arrays.</p>\n</div>\n<div class="section" id="re-usable-prepared-statements">\n<h3>Re-usable prepared statements</h3>\n<p>In past versions of Pomm, every time a query was made, it was prepared, run and destroyed. If the query was to be issued again, the process was iterated over and over. It is not the case anymore, every prepared statements are buffered in the Connection class ans re used if necessary. This also leads to a dramatic performance gain. Another difference from Pomm's previous versions is that you can use prepared statements directly by yourself.</p>\n</div>\n<div class="section" id="connections-made-configurable">\n<h3>Connections made configurable</h3>\n<p>It is now possible to SET Postgresql environment variables at connection's start. Default interval style and timestamp style are enforced this way using ISO8601 standard which makes the according converters to be faster and simpler. It is now a lot easier to code a converter associated with a special formatted type.</p>\n</div>\n<div class="section" id="escapable-values">\n<h3>Escapable values</h3>\n<p>In previous versions of Pomm, it was not possible to save an object using Postgresql function to set some of its values. It is now possible to set escaped commands in entities values so they are interpreted in Postgresql :</p>\n<blockquote>\n<p>&lt;?php</p>\n<dl class="docutils">\n<dt>$entity = $entity_map-&gt;createAndSaveObject(</dt>\n<dd>array('data1' =&gt; new PommTypeEscape("my_schema.my_pg_function('something')")));</dd>\n</dl>\n<p>echo $entity['data1']; // the result of Postgresql function my_pg_function('something')</p>\n</blockquote>\n</div>\n<div class="section" id="code-clean-up">\n<h3>Code clean up</h3>\n<p>The connection <cite>filterchain</cite> has disappeared, so have the <cite>Collection</cite> and <cite>SimpleCollection</cite> classes replaced by a single <cite>Collection</cite> class. The Collection filters have been rewritten to a simpler implementation.</p>\n</div>\n </div>\n	t
pomm-1-1-4-is-out	Pomm 1.1.4 is out	2013-10-28 13:00:31.543735	2013-10-28 13:00:31.543735	\n<div id="preview_div">\n<p>I am happy to announce that 5 months after the previous version, Pomm 1.1.4 has been released this week end. It appeared a significant number of corrections justified a new version. The changelog contains the following:</p>\n<ul>\n<li>Bug in the string converter with empty string and NULL</li>\n<li>Lot of typos were found in the documentation</li>\n<li>Added missing method getMaxPerPage in the Pager class</li>\n<li>Bug in PDOFilter Exception</li>\n<li>Bug with intervals interpretation</li>\n</ul></div>\n	t
pomm-1-2-rc2-is-out	Pomm 1.2-RC2 is out	2013-11-05 09:50:30.771766	2013-11-05 09:50:30.771766	<p>We are pleased to inform you the "1.2-RC2" release has been tagged last night. It is somehow unusual to see a Release Candidate version to propose new features, but as this shiny new version of Pomm has been tested on development sites, it appeared we were two fingers from some useful functionalities it would have been foolish not to craft Pomm 1.2 with.</p>\n<p>One of the most missed features from any other database framework is the Postgresql's asynchronous message system (LISTEN / NOTIFY). This makes programmer able to use the database as event dispatcher to trigger asynchronous and parallel jobs.</p>\n<p>Another missing feature was the ability to save several objects in one move. The <code>createAndSaveObjects()</code> map class's method takes an array of value sets, saves it to the database using one INSERT and returns directly a collection of entities. This is particularly handy when dealing with web services or CSV files.</p>\n<p>Aside of these functionalities, some bugs were fixed, the test coverage has been extended to include PHP 5.3 and Postgresql from version 9.0. The main documentation has been updated. </p>\n<p>Proof readers and testers welcome !</p>	t
why-pomm	Why Pomm ?	2012-09-21 16:32:56.17791	2012-09-21 16:32:56.17791	\n <p>I recently received comments which are very very useful to know what people think about Pomm project after just having taken a glance at the official website. I will comment back here a couple of negative comments.</p>\n <div class="section" id="pomm-is-the-doctrine-of-the-poor">\n <h1>Is Pomm the Doctrine of the poor ?</h1>\n <p>Let's begin where it hurts:</p>\n <pre class="literal-block">\n   Pomm claims no to be an ORM but I do not perceive the difference.\n  It looks like Doctrine with less features and specific to Postgresql.\n </pre>\n <p>Well, this indicates hundred of people who visited Pomm's website left thinking the same thing. In fact, Pomm shares almost nothing with Doctrine as the underlying philosophy is utterly different.</p>\n <p>Pomm does not need the high level abstraction of an ORM because it relies on Postgresql's features. Postgres already has some object oriented features. You can manage data from tables as they were objects and fetch relations directly in your SQL queries. Pomm with its converter system takes advantage of that. Instead of trying to create an object  abstraction over a relational set of data, it just transposes what's in Postgres to PHP.</p>\n <p>This is a big win because the 40 years old SQL language has been made for querying and presenting data. Developers using it are able to directly extract from the database the data they want presented in the best way for their business process needs. This makes the PHP code slim, fast and easy to test. This is also a big win from the performance perspective.</p>\n <pre class="literal-block">ORMs is what you get when object oriented programmers code a data store over a relational database.\n Postgresql is what you get when relational database developers code an object oriented data store.\n </pre>\n <p>On the other side, PHP which is often bashed for the weak typing and its loose object structure is a perfect match when it gets to be married with SQL. SQL is a strongly typed declarative paradigm language dedicated to the data crossing and presentation. PHP is an imperative paradigm language good at creating web workflows. It can map elastic objects over result-sets returned by SQL as soon as you sandwich a nice data converter between those two layers. This is what Pomm is. Let Postgres manage relations between objects and return you the data your business needs so Pomm map them to PHP objects.</p>\n <p>Pomm's converter is the most tested part of Pomm. It allows you to fetch from Postgres objects that contain arrays of objects containing arrays of objects and so on. It supports HStore key value stores and map them to PHP associative arrays. It supports Pg's geometric types and many more (xml, json, ranges etc.). You can even define your own types like you would do in an object oriented paradigm and tell Pomm what PHP representation you want to link them with.</p>\n <p>In an ORM world, classes are strongly coupled to tables, with Pomm, classes are loosely coupled to sets. You can define a map class that is tied with <tt class="docutils literal">VALUES ('pika', 'chu')</tt>. Of course the <tt class="docutils literal">findAll()</tt> method of such class would always return one instance with the same values but isn't that by example what you want in a test suite ?</p>\n </div>\n <div class="section" id="it-s-all-about-tools">\n <h1>It's all about tools</h1>\n <p>It is not my intention to reopen the <a class="reference external" href="http://www.codinghorror.com/blog/2006/06/object-relational-mapping-is-the-vietnam-of-computer-science.html">ORM war</a> here nor to say bad things about Doctrine. As another comment said:</p>\n <pre class="literal-block">\n Doctrine2 is all-right for all the developers needs.\n </pre>\n <p>And that's as true as thinking you can almost do <a class="reference external" href="http://www.revision-zero.org/orm-haters-do-get-it">every kind of work</a> with a swiss army knife so why would you be interested in <a class="reference external" href="http://www.craigkerstiens.com/2012/04/30/why-postgres/">specialized tools</a> ?</p>\n <p>I do valve amplifiers as a hobby aside my real job and I started working steel enclosures with a Dremel. I found this hard, I was very bad at it and the result was just acceptable. I am not saying Dremel is bad -- I still use it almost everyday -- but since this time I have bought a professional drill set with a real drill and guess what: the <strong>job is perfect and done in less time</strong>. As the implementation part stopped being an obstacle, I began to have new ideas I couldn't even imagine before. On the other hand, I cannot use these drills on a concrete wall nor a piece of wood without damaging them and obtaining poor results. That's a question of choice, mine is to use the right tool for the right job.</p>\n </div>\n	t
feature-highlight-composite-types	feature highlight: composite types	2013-11-17 16:28:28.023727	2013-11-17 16:28:28.023727	\n<p><a href="http://www.postgresql.org/docs/9.3/static/rowtypes.html" title="Postgresql documentation">Composite type</a> is a way to represent structured data as part of other data. One example is user postal address. In a lot of cases, addresses are structured in a different table and programmers use a join to fetch the user with its address as an object. From a business perspective, address are never used alone so they should not have their own set. From a performance point of view, this join is really expensive as soon as there are search on every users living in a given city.\nAn other approach is to store directly address fields with the user, making the address indistinctly part of it. From a business perspective, this is bad because the attribute « zipcode » of the user is not a direct attribute. The good way is to create a <code>Address</code> object and grant users with it as attribute.</p>\n\n<script src="https://gist.github.com/chanmix51/7447181.js?file=address_type.sql"></script>\n\n<p>Doing so, requires the database layer to understand how to deal with database field output like</p>\n<pre><code>("27, route des fleurs", "61270", "RAI",)\n</code></pre>\n<p>Pomm 1.2 comes with a converter named <code>PgRow</code> to handle row fields. The converter must be fed with the structure of the expected row and it might also been told what class to use to instance an Address field type with the data provided by the database. If a type class is missing, data will be returned as array.</p>\n\n<script src="https://gist.github.com/chanmix51/7447181.js?file=pg_row.php"></script>\n\n<p>In the code above, the converter is told to create instances of `\\My\\Database\\Type\\AddressType\\ class with the converted data.</p>\n\n<script src="https://gist.github.com/chanmix51/7447181.js?file=AddressType.php"></script>\n\n<p>Pomm also comes with a generic (ie abstract) class for this kind of data type: the <code>Composite</code> type. Children of this class just have to declare as public attributes, the data to be exposed. Using it becomes as easy as:</p>\n\n<script src="https://gist.github.com/chanmix51/7447181.js?file=show_customers.php"></script>\n\n<p>Of course, it is possible to enrich this type class with getters and setters.</p>\n<h2 id="searching">Searching</h2>\n<p>Searching on one of the composite type's field is as easy as searching on any other fields of the customer's table. Say we want to fetch all the customers living in cities having more than 4 characters in a department with postal code starting with 44:</p>\n<pre><code>$customers = $map-&gt;findWhere("textlen((address).city) &gt; $* AND (address).postal_code ~ $*", array(4, '^44'), 'ORDER BY name LIMIT 10');\n</code></pre>\n<p>Enjoy.</p>\n	t
pomm-1-2-rc3-is-out	Pomm 1.2-RC3 is out	2013-11-22 10:23:47.086837	2013-11-22 10:23:47.086837	\n\n\n\n<p>Good news, it sounds final countdown to Pomm 1.2.0 is reaching its end. This third release candidate release proposes a cleaner source code by far, thanks to <a class="reference external" href="https://insight.sensiolabs.com/">SensioLabs insight(tm)</a> analysing tool. Although Pomm does not own any medal because of the <tt class="docutils literal">eval</tt> statement in the <tt class="docutils literal">HStore</tt> converter, it provided an deep and accurate analysis of the code that could lead to an efficient refactoring. Without this <tt class="docutils literal">eval</tt>, Pomm would earn a silver medal, this time because of the magic methods that animate the <tt class="docutils literal">BaseObject</tt> as flexible objects. These four points prevent Pomm's code source from being <a class="reference external" href="https://insight.sensiolabs.com/projects/5bff04e5-c391-4f91-850f-cf2b3110e222/analyses/5">rated platinum</a>. In an other hand, if Pomm followed admitted good practices, it would be an ORM.</p>\n<dl class="docutils">\n<dt>Since the RC2:</dt>\n<dd><ul class="first last simple">\n<li>timestamps with time zone are now supported.</li>\n<li>a new method appeared to handle aliases in the <tt class="docutils literal">getSelectFields</tt> like methods.</li>\n<li>a new converter for composite types has been implemented.</li>\n<li>composite types can be converted to objects using an abstract composite type.</li>\n<li>bugs in the prepared queries placeholder were fixed.</li>\n<li>code clean up.</li>\n</ul>\n</dd>\n</dl>\n<p>It is now time to use it and provide as much feedback as you can. Road to 1.2.0 is open.</p>\n	t
pomm-reported-to-work-with-mysql	Pomm reported to work with MySQL !	2011-10-13 08:51:29.4899	2011-10-13 08:51:29.4899	<p>I must say, I am impressed. Some people reported they have been able to use Pomm with Mysql just by changing the way the DSN was handled by PDO in the <i>Connection</i> class. Of course the database introspection does not work, but they used Postgres to generate their model files and just change the DSN to get it to work with MySQL.</p><p>All basic types like string, int, timestamp seem to work, I have no information yet on float and boolean and I have no hope HStore, Circle and other unsupported data type will work with MySQL. Anyway it may cover 90% of simple webstite's needs ;)</p><p>Enjoy !</p>	t
pomm-1-2-is-available	pomm 1.2 is available	2014-01-21 17:01:06.038852	2014-01-21 17:01:06.038852	\n<h2>Better, simpler, faster</h2>\n\n<p>The 1.2 branch was under development since April 2013 and it has been an interesting time. The heart of Pomm has been deeply remodelled to bring tremendous features and performances.</p>\n\n<ul>\n<li>Pomm uses PHP's native Postgresql API instead of PDO</li>\n<li>Configurable connections</li>\n<li>JSON, timestamp with timezone and composite types converter have been added</li>\n<li>Observer for LISTEN / NOTIFY support</li>\n<li>Prepared statement pooling</li>\n<li>Generic logger support (Monolog)</li>\n</ul>\n\n<p>Even though this sounds like a complete reshape, Pomm 1.2 is usable the same way as 1.1 but with added functionalities.</p>\n\n<p>The switch from PDO to native API showed great performances gain in addition to a better support of Postgresql features. Binary type is fully functional and asynchronous message system is supported. This also could lead to a simpler and better collection system. Prepared statements implementation has also been reworked. Every statement is prepared and pooled in a connection. If a statement is issued twice, the prepared statement is re-used without the developer to care about it.</p>\n\n<p>Converters have also been one of the centers of attention. Connections in Pomm 1.2 now configure database output to make the converter's code faster and more robust. Composite type converter is a big achievement making developers able to create complex types in the database and fetch them as PHP objects easily.</p>\n\n<p>There are tons of other little improvements crafted with this release (raw strings, multiple inserts, improved escaping etc.), they are in the <code>whatsnew</code> in the documentation attached with the project. In the same time, code quality has been greatly improved using both scrutinizer and SensioLabs' insight analyzing tool.</p>\n\n<h2>Migrating from 1.1</h2>\n\n<p>The PDO refactoring led to change the values placeholder in SQL queries, this means all custom SQL queries and <code>Where</code> clauses shall be modified to use <code>$*</code> instead of PDO's <code>?</code>. Migrating may just be it unless you use the filter chain or the remote fields formatters. Both have been removed with no replacement in 1.2. Since the logger has been changed to support generic PSR logger, there might be some adjustments in your development code to instantiate the logger. </p>\n\n<p>If your application benefits from Postgresql's JSON type, be aware the new JSON converters dumps a PHP associative array instead of a string with Pomm 1.1. Range type signature has also changed so if you used super class of these types, you should change the signature accordingly. \nthe blue box...</p>\n	t
pomm-1-0-2-is-out	Pomm 1.0.2 is out	2012-05-03 11:06:44.56989	2012-05-03 11:06:44.56989	<p>I am happy to announce Pomm 1.0.2 release today. This release fixes several bugs, one of them regarding the PgEntity converter. Upgrading is highly recommended.</p>	t
php-tour-2012-in-nantes	PHP Tour 2012 in Nantes	2012-11-13 10:20:21.123012	2012-11-13 10:20:21.123012	\n<p>I am happy to announce I will be present at the <a href="http://afup.org/pages/phptournantes2012/">PHP Tour in Nantes</a> that will take place the 29th and the 30th of November.</p>\n<p>I will be happy to hopefully welcome you to an unconference if you wish to learn more about Pomm. See you there,,,</p>\n	t
conference-about-pomm-silex-and-symfony-at-the-symfony-live-paris-2013	Conference about Pomm, Silex and Symfony at the Symfony Live Paris 2013.	2013-03-12 14:33:44.855741	2013-03-12 14:33:44.855741	\n<p>I will talk (in French) about Pomm at the <a href="http://paris2013.live.symfony.com/speakers">Symfony live</a> between the 2nd and the 6th of April in Paris. The conference will be about Pomm integration in developments using Silex or Symfony. Practical examples will be provided to show how the leverage Postgresql's power from your web applications.</p>\n\n<p>As I am still preparing the conference, if there is something you think that should be mentioned (real life example, feedback etc.), feel free to poke me or let a comment below.</p>\n\n<p>Of course, I will be happy to meet anybody with interest into Pomm in Paris during this time, see you there !</p>\n	t
welcome-to-pomm-s-website	Welcome to Pomm's website	2011-06-14 10:22:22.969808	2011-06-14 10:22:22.969808	<p>And there are a lot to be said for this first news. Pomm has evolved a lot as I had to work on a <a href="http://www.silex-project.org">Silex</a> project.</p> <ul><li>The <i>Pomm</i> class with static methods is no more and replaced by a new <i>Service</i> class that integrates well with dependency injection containers if you use any.</il>\r<li>The old field types are deprecated and no more supported. They have been replaced by a more convenient <i>Converter</i> system that can be extended to implement your own database composite or enumerated types.</li>\r<li><b>Documentation is available</b> from this site and in a .rst format in the sources.</li>\r<li><i>Tools</i> were scanning the database to generate base map files, they still do of course but also generate the empty map and entity classes.</li></ul><p>The next step is to work on the <a href="http://www.symfony.com">Symfony 2</a> bundle. <br />Enjoy and stay tuned.</p>	t
pommbundle-up-to-date	PommBundle up to date	2011-06-17 11:06:27.946566	2011-06-17 11:06:27.946566	<p>The PommBundle has been deprecated for too long, it was time to make it work again. This is done. The bundle now works with the Pomm's Service class and the Tools have been refactored to integrate well with Symfony 2 command line tools.</p><p>The bundle is available on the download page.</p>	t
go-beta	Go Beta !	2011-06-24 23:32:19.365609	2011-06-24 23:32:19.365609	<p>Pomm has evolved a lot during the last weeks and I am somewhat pleased of what it can do with Postgresql:</p>\n<ul>\n  <li>The converter system to take advantage of geographic, extended or custom composite types</li>\n  <li>Pomm even support embedded entities !</li>\n  <li>Smart methods to easily create the most common queries (including WHERE ... IN)</li>\n  <li>Use of PHP namespaces to deal with Postgesql's schemas</li>\n  <li>Database scanning and PHP code generation</li>\n  <li>You can extend Pomm in your model files with your own types, base classes etc</li>\n  <li>And it is still <strong>fast</strong>, <strong>simple</strong>, and <strong>efficient</strong></li>\n</ul>\n<p>These features have been coded based on the need I had while working on several little websites. A useful website using Pomm will be released soon, there will be a blog post about it. I think it is now time to slow down the changes and to use Pomm on bigger projects. This might be the right moment for Pomm to go beta.</p>	t
beta2	Beta2	2011-07-25 17:18:50.469612	2011-07-25 17:18:50.469612	<p>Pomm second beta release is out. The menu includes new geometric converters (segment and circle) and a (hopefully) bug free HStore converter.</p>\n<p><strong>Important !</strong> The <i>Integer</i> converter has been renamed to <i>Number</i> because it covers integers, numerics and floats. If you upgrade from version beta1, regenerate your base files so converters will be automatically updated. </p>	t
beta4-intervals-and-pagination	Beta4, intervals and pagination.	2011-11-19 08:12:06.857826	2011-11-19 08:12:06.857826	\n<p>I am happy to announce the 4th beta release of the Pomm non ORM. It brings to Pomm really nice features:</p>\n<ul>\n  <li><em>Collection filters</em> make you able to get foreign object from SQL joins.</il>\n  <li><em>a Pager class</em> for convenient pagination.</li>\n  <li><em>Intervals and UUID types</em> are now supported.</li>\n<li><em>MySQL incompatibility</em> due to the unsupported INSERT ... RETURNING *</li>\n</ul><p>More to come soon !</p>	t
major-bugfix-and-code-examples	Major bugfix and code examples.	2011-11-20 20:02:51.073883	2011-11-20 20:02:51.073883	\n<p>An important bug concerning the model files generation has been fixed. Pomm uses the schema name as namespace for the model files but <em>Public</em> is a PHP protected word. The public schema namespace will now be <em>PublicSchema</em>.</p>\n<p>There is now <a href="/documentation/examples"> an example section</a> in <a href="/documentation">the documentation</a> all good ideas are welcome.</p>	t
the-lost-age-of-innocence	The lost age of innocence.	2011-11-26 13:04:22.945785	2011-11-26 13:04:22.945785	<p>Pomm has been under development for a while. It was aimed at being simple, fast, lightweight and efficient. I must say I am pretty happy of what it has become over time and I was very exited when I did implement the filter feature because it made Pomm able to simulate relations between objects. This was also the starting point of a the research for a way to keep consistency between fetched objects from the database.</p><p>A dumb implementation meant 1 instance per fetch, if an object is fetched twice from the database it would have two instances of the same class and the same values. As soon as you create an OO relation using a JOIN it becomes a problem.</p><p>Fortunately Pomm is far from being the first database Object Mapper and this problem has a solution in the name of the <em>Identity Mapper</em> design pattern. This pattern uses an index of fetched objects to ovoid fetching them twice from the database. From my point of view, this makes sense in the Java world where there are application servers that keep running for days and months. In PHP the environment is different. The whole world is instanciated once, the response is sent and then all instances die. This lowers the benefits of the <em>Identity Mapper</em> while making it downsides stronger.</p><p>Keeping an index of all fetched object prevent PHP's garbage collector to work efficiently as we keep at least an instance in the index. Even if I want to be smart and try to check if this instance is modified or not, if I just fetch an instance from the database, modify it and unset it, there is no way I'll be able to fetch this object again from the database, the identity mapper will keep returning me the same broken instance.</p>\n<p>Because it can be bug and feature, I wanted to let the developers be able to manage the <em>IdentityMapper</em> in Pomm. The first question was "Where to store it ?". In the map classes ? As a separate service ? The place I felt the more comfortable with this was the <em>Connection</em> class. You can set a default <em>IdentityMapper</em> class in the database options, but you can also provide an instance in the <em>createConnection()</em> method of the <em>Database</em> class.</p><p>There are 3 different possible classes to choose from: <em>IdentityMapperNone</em>, <em>IdentityMapperStrict</em> and <em>IdentityMapperSmart</em>. The None one is when an identity mapper has been declared for all connections and you explicitly wants none. The strict is very simple: instances are stored and retrieved from the mapper. If you delete an instance from the database, do not forget to unset it from the mapper as well or it will keep providing you with the deleted instance. The smart tries to be a bit more clever. If the instance it got is in the deleted state, it removes it. If the instance it helds has not been modified, values from a fetched objects are merged to the existing instance.</p>\n<p>Of course this does not recover from all the problems the IM can provide but this may be a good compromise in PHP where the goal of this design pattern is not so to limit the query number -- especially with Pomm where developers have a great control over the queries -- but to ensure to keep the existing instances consistent. I think Pomm has made its way to a stable release ... Stay tuned !</p>	t
beta3-is-out	beta3 is out !	2011-09-01 07:46:17.265586	2011-09-01 10:00:33.205477	<p>The third beta version has been released. Fixes where mainly concerning the DSN.</p><p>I have been working in several projects using Pomm recently and I was pleased to see the time saved by using Postgresql's features and model automatic generation. I would like to hear your feedback, drop me an email !</p>	t
talks-at-phpforum-and-symfony-live-paris-2012	Talks at PHPForum and Symfony Live Paris 2012	2012-06-11 13:09:05.405893	2012-06-11 13:09:05.405893	<p>Hi, thanks to all who followed and participated to my talks about Postgresql and Pomm. There was a nice interest into Pomm and its philosophy so I tried to emphase in what Pomm was different than the classical dbal / orm usual approach.</p>\n<p>The slides for both presentations are online, here is the french <a href="http://pomm.coolkeums.org/phpforum/build/01-introduction.html">Tirer parti de Postgresql en PHP avec Pomm</a> held at the Php Forum. Here is the english <a href="http://pomm.coolkeums.org/sflive/build/01-introduction.html">What can Postgresql do for you</a> at the sf live.</p>\n<p>By the way, the <a href="http://www.coolkeums.org/en/article/pomm-a-concerto-for-php-and-postgresql.html">Concerto for PHP and Postgresql tutorial</a> has been corrected (code and backslashes glitches essentially).</p>\n	t
sflive-paris-2012-video-presentation-is-online	SfLive Paris 2012 video presentation is online.	2012-10-11 16:26:21.277914	2012-10-11 16:26:21.277914	<p>You can <a href="http://symfony.com/video/php-developers-what-can-postgresql-do-for-you/English">access the video from here.</a> Slides are <a href="http://pomm.coolkeums.org/sflive/build/01-introduction.html">also available</a> if you want to really see the slides while watching the presentation.</p><p>Thanks to Sensio and Fabien Potencier for organizing such a nice event.</p>	t
what-s-new-in-pomm-1-1	What's new in Pomm 1.1	2012-10-12 15:22:48.366056	2012-10-12 15:22:48.366056	\n<div class="body">\n<div class="section" id="what-s-new-in-pomm-1-1">\n<div class="section" id="postgres-9-2-types-support">\n<h3>Postgres 9.2 types support</h3>\n<p>Pomm now offers native converters for <strong>ranges</strong> (tsrange, int4range, int8range numrange) and <strong>Json</strong> types. It has better support for <strong>Interval</strong> type and you can directly set PHP <strong>DateTime</strong> instances as parameters of your prepared queries.</p>\n</div>\n<div class="section" id="more-handy-methods-for-your-controllers">\n<h3>More handy methods for your controllers</h3>\n<p>It benefits from Postgresql's <em>RETURNING</em> clause so you can directly write in the database and get the according instance:</p>\n<blockquote>\n<ul class="simple">\n<li><cite>$entity = $map-&gt;createAndSaveObject(array($form-&gt;getValues()))</cite></li>\n<li><cite>$entity = $map-&gt;updateByPk(array('id' =&gt; $form['id']), array('field_to_update' =&gt; $form['field_to_update'], ...))</cite></li>\n<li><cite>$array = $map-&gt;findAll()-&gt;extract();</cite></li>\n<li><cite>$collection = $map-&gt;findAll('ORDER BY created_at LIMIT 5');</cite></li>\n</ul>\n</blockquote>\n</div>\n<div class="section" id="better-entities-and-collections">\n<h3>Better entities and collections</h3>\n<p>The behavior of entities in 1.0 was unclear regarding field detection and NULL values. It was not really possible to delete a field from an entity instance. It is now possible with the <cite>$entity-&gt;clear('my_field')</cite> or <cite>$entity-&gt;clearMyField()</cite> or <cite>unset($entity['my_field'])</cite> method calls.</p>\n<p>The <cite>extract()</cite> method has been changed so it can also flatten any possible embed entities. This is desirable when by exemple dealing with web services to export everything in JSON format. The behavior of the old <cite>extract()</cite> method has been moved in the better named <cite>getFields()</cite> method.</p>\n<p>The Collection had some improvements too. In 1.0, the use of scrollable cursors has been abandoned because this was too obtrusive from a SQL perspective. To be able to scroll on result sets more than once, the Collection system had to cache all the fetched results that could lead to a huge memory consumption. There is a new <cite>SimpleCollection</cite> class that just implements a non rewindable iterator. It does not support hydration filters nor cachine, it just let you foreach once over results as fast as PHP can, which is what you want 99.9% of the time. The <cite>Collection</cite> class is still here providing the same features as 1.0 and it is still the default collection used by Pomm 1.1. You can switch to <cite>SimpleCollection</cite> or whatever other <cite>Iterator</cite> implementation you want just by overloading your map classes <cite>createCollectionFromStatement()</cite> method.</p>\n<p>To end with <cite>Collection</cite> class, all the filter methods now implement the fluid interface so you can register filters and return results without using temporary variable:</p>\n<pre class="literal-block">return $this-&gt;query($sql, $values)\n    -&gt;resetFilters()\n    -&gt;registerFilter($callable1)\n    -&gt;registerFilter($callable2)\n    ;\n</pre>\n</div>\n<div class="section" id="fields-getters-are-awesome">\n<h3>Fields getters are awesome</h3>\n<p>The <cite>getFields()</cite> methods family is one of the coolest features of Pomm allowing developers to add their own fields to all or just in one query. In an other hand, it was tedious to filter fields not to fetch some of them (passwords, technical fields etc.). Fields are now handled as an associative array in the map class with the key becoming the SQL field's alias name so it is now easy to filter fields with PHP's <cite>array_filter</cite> or <cite>array_map</cite> functions.</p>\n<p>Aside of that, it is tedious to always have to</p>\n<pre class="literal-block">join(', ', $map-&gt;getSelectFields(...\n</pre>\n<p>to nicely format SQL queries. Pomm 1.1 comes with two formatters <cite>formatFields</cite> and <cite>formatFieldsWithAlias</cite>. These formatters take a getField method name as first argument. They use it to get the fields and format the output as a string to fit your SQL queries.</p>\n<pre class="literal-block">echo $this-&gt;formatFieldsWithAlias('getFields', 'pika');\n\n"pika.field1" AS "field1", "pika.field2" AS "field2", ...\n</pre>\n<p>There is also the field getters triggered by <em>Collection filters</em>. This was noted as deprecated in the 1.0 version. It is finally kept in the 1.1 version because it may be desirable to split a non nested result set in several entities.</p>\n</div>\n<div class="section" id="generation-tools-are-not-forgotten">\n<h3>Generation tools are not forgotten</h3>\n<p>The 1.0 tools lacked output when used from the command line. There is now a <cite>OutputStack</cite> that manage output messages. Generated schemas and namespaces can be formatted the way you want using a placeholder syntax. It is also now possible to exclude tables from a schema generation task (useful with <a class="reference external" href="https://github.com/joelonsql/PgDeploy">PgDeploy</a> by example).</p>\n</div>\n<div class="section" id="the-last-but-not-the-least">\n<h3>The last but not the least</h3>\n<p>The first task toward the 1.1 version has been to rewrite the whole test suite using PHPUnit. It is now easier to develop features and add the according tests as PHPUnit is very standard in the PHP world. This also makes Pomm testable with Travis the open source continuous integration service. The first side effect of this rewrite has been to spot numerous little bugs and put light on some inconsistent behaviors. Few of them still remain today (ie binary string to Pg's bytea type conversion) but the vast majority have been fixed. Most of those corrections were also backported to the 1.0 branch.</p>\n</div>\n</div>\n<div class="section" id="migrating-from-1-0-to-1-1">\n<h1>Migrating from 1.0 to 1.1</h1>\n<p>Migrating from 1.0 to 1.1 should not be a hassle, here is a list of points that break compatibility between 1.0 and 1.1:</p>\n<div class="section" id="pgentity-refactoring">\n<h3>PgEntity refactoring</h3>\n<p><cite>PgEntity</cite> converter's constructor now takes a <cite>BaseObjectMap</cite> instance as argument instead of <cite>Database</cite> and the class name:</p>\n<pre class="literal-block">// 1.0\n$database-&gt;registerConverter(\n    'WeatherProbe',\n    new Pomm\\Converter\\PgEntity($database, '\\Db\\Weather\\WeatherProbe'),\n    array('weather_probe')\n    );\n\n// 1.1\n$database-&gt;registerConverter(\n    'WeatherProbe',\n    new Pomm\\Converter\\PgEntity($weather_probe_map),\n    array('weather_probe')\n    );\n</pre>\n<p>This is very useful if you want <cite>PgEntity</cite> to deal with a map class that is custom made with extra virtual fields or filters.</p>\n<p><a class="reference external" href="https://github.com/chanmix51/Pomm/issues/30">See the related ticket #30</a>.</p>\n</div>\n<div class="section" id="executeanonymousquery">\n<h3>executeAnonymousQuery</h3>\n<p>This method is now a Connection instance method instead of a Database instance method. <a class="reference external" href="https://github.com/chanmix51/Pomm/issues/29">See the related ticket #29</a>.</p>\n</div>\n<div class="section" id="entity-getter">\n<h3>Entity getter</h3>\n<p>The <cite>get($field)</cite> entity's method throws an exception when the field does not exist in 1.1. In 1.0, the behavior was to return NULL which lead to bugs with typos in method names being silently ignored.</p>\n<p><a class="reference external" href="https://github.com/chanmix51/Pomm/issues/48">See the related ticket #48</a>.</p>\n</div>\n</div>\n </div>\n	t
rc2-is-out	RC2 is out !	2011-12-04 15:06:58.113806	2011-12-04 15:06:58.113806	<p>Lot of good things happened this week. The first good news is the Model files are now in a namespace containing both <strong>database name</strong> and <strong>schema name</strong> to ovoid collision on objects stored in different databases but same schema (public). The way the model files are generated is now completely free, no more mandatory <em>Model\\Pomm\\Entities</em>. It is your decision to store the model files in a strategic place.</p><p>The second good news is <strong>the bytea postgresql type now has its own converter</strong>. You can store images, sound or whatever in the database and retrieve it through your preferred non ORM. As we are talking about converters, the <em>tsvector</em> type is now associated to <em>String</em>. Theses changes allowed us to generate the model for <a href="http://pgfoundry.org/frs/?group_id=1000150">the Pagila database</a>, one of the sample databases that can be found on PgFoundry. That's a big win because this database uses a lot of Pg features.</p><p>The changes in the <em>ScanSchemaTool</em> broke the compatibility in the <a href="https://github.com/chanmix51/PommBundle">PommBundle</a> and the <a href="https://github.com/chanmix51/PommServiceProvider">Silex PommServiceProvider</a>, so be sure to upgrade them if you upgrade Pomm.</p><p>Thanks to <a href="https://github.com/docteurklein">Dr Klein</a> for the very valuable work he did. Take care and enjoy !</p>	t
rc3-is-out	RC3 is out !	2012-01-11 10:53:45.89271	2012-01-11 10:53:45.89271	<p><strong>Happy new year</strong> faithful reader !</p><p>This release comes from some good developers had a look at Pomm's principles and design. The most important change concerns entity classes:<ul><li>They are now fully structure agnostic. They do not know what are the fields stored in the database nor what is their primary key as it is the <em>Map</em>'s job to do so.</li><li>Direct access to attributes triggers accessor overloads if they exist.</li><li>The <em>get()</em> accessor now accepts array of attributes as parameter.</li></ul></p><p>All these changes came from what we thought the best use of Pomm with sf2 form component was. Aside of that, a new <em>Inspector</em> class is born to relieve <em>Tools</em> classes from tedious queries and make them available for your own tools by example. Now more than ever Pomm needs to be tested on small projects, prototypes so we can expect a stable release ... soon :) Take care.</p>	t
views-are-now-supported	Views are now supported	2012-01-15 16:21:53.861601	2012-01-15 16:21:53.861601	<p>Hi ! <br />Well, there is not much more to say about this, views are considered by Pomm as normal tables so unless you specified rules on your views, you can expect your write attempts to fail on such objects.</p><p>The Inspector has also been extended so now it is possible to display stored procedures source code if available. Here is a little PHP script you can use on the command line to display the code. </p><script src="https://gist.github.com/1616300.js?file=show_sp_source.php"></script><p>It can be usefull to put the version of the SP in a comment in the source code so you can always know what's running in your database.</p><p>Take care !</p>	t
rc4-and-tutorial-availability	RC4 and tutorial availability.	2012-02-02 11:34:03.577782	2012-02-02 11:34:03.577782	<p>I am really happy to announce Pomm's 4th release candidate version. A lot of work has been done since RC3 including lot of bug fixed and an transparent new filter chain for queries. This nice feature makes developers able to add code before and / or after each SQL query is sent to the database. The <em>LoggerFilter</em> is the first filter available but you can of course create yours.</p>\n<p> Another important news is there is now an <a href="http://www.coolkeums.org/en/article/pomm-a-concerto-for-php-and-postgresql.html">online tutorial</a> which can get you trough some Pomm's nicest features from scratch. It is a story of an adventure with XML, custom types, views and weather forecast. Hope you'll enjoy it. Take care.</p>	t
1-0-4-is-out-lot-of-bugfix	1.0.4 is out, lot of bugfix.	2012-07-11 19:59:07.648303	2012-07-11 19:59:07.648303	<p>After 1.0 branch forked from the master branch, the first job before going on the development has been to rewrite the tests using phpunit. I can say it really made a difference with the 1.0 test suite. Lot of little (and bigger) bugs were spotted and fixed, these corrections has also been applied in the 1.0 branch: the version 1.0.5 is out.</p>\n<p>There are also a couple of non addressed bugs like the ones found in the binary converter (<a href="https://github.com/chanmix51/Pomm/issues/32">here</a> and <a href="https://github.com/chanmix51/Pomm/issues/31">here</a>). Help would be appreciated if you had any idea on how to do that in PHP.</p>\n<p>As the phpunit migration is nearly over, summer will likely see some of the <a href="https://github.com/chanmix51/Pomm/issues?milestone=4&page=1&state=open">1.1 features</a> implemented in the master branch.</p>\n	t
fall-2012-news	Fall 2012 news	2012-09-10 09:27:08.533879	2012-09-10 09:27:08.533879	<p>The summer has been quite busy for Pomm's project. As the 1.0 branch is become more and more quiet the development branch had a lot of its tickets closed. </p>\n<p>\nAmongst the changes:\n<ul>\n  <li>The tests have been ported to phpunit.</li>\n  <li><code>getFields()</code> method now handle column aliasing.</li>\n  <li>New handy methods in the map class like <code>joinSelectFieldsWithAlias()</code>.</li>\n</ul>\n</p>\n<p>Some bugs have also been reported and sometimes PR have been submitted. Thank you for your interest and commitment to Pomm. If some of you plan to assist the <a href="http://http://confoo.ca">Confoo</a> conference in Montreal in Feb 2013, I have submitted <a href="http://confoo.ca/en/call-for-papers/speaker/gregoire-hubert">a talk about Postgres and Pomm</a>, so if you are interested to hear about that, do not hesitate to register and vote for my talk.</p>\n	t
pomm-1-0-6-is-out	Pomm 1.0.6 is out	2012-09-12 13:35:47.413922	2012-09-12 13:35:47.413922	<p>This new version of the stable branch of Pomm fixes a potential security issue when using the <code>PgNumber</code> converter that could lead to SQL injection. Thank so much to <a href="https://github.com/kcivey">Keith C.Ivey</a> for spotting and fixing the problem. Some other minor bugs have been killed.</p>\n	t
the-real-1-0-6-is-out	The real 1.0.6 is out.	2012-10-19 12:12:55.213947	2012-10-19 12:12:55.213947	<p>I am happy to announce the immediate release of Pomm 1.0.6. The previously announced 1.0.6 on this website was a mistaken 1.0.5.</p><p>This release fix several bugs in the converter system especially when entities and arrays were combined together. The HStore converter has also been enhanced (like the 1.1) and is now faster while being by far less restrictive on key names.</p> 	t
presentation-about-postgresql-and-pomm-in-nantes	Presentation about Postgresql and Pomm in Nantes.	2012-10-19 12:21:46.037977	2012-10-19 12:21:46.037977	<p>I will be giving a presentation about all the Postgresql's goodness and how to use them in PHP with Pomm. The presentation will take place the 29th of October in Nantes. More information on the <a href="http://www.afup.org/pages/rendezvous/">AFUP's website</a>.</p><p>Hope to meet you there.</p>	t
a-mailing-list-is-now-available	A mailing list is now available.	2012-10-26 14:34:51.067884	2012-10-26 14:34:51.067884	<p>A <a href="https://groups.google.com/forum/?fromgroups#!forum/pommproject">mailing list</a> has been created on google groups because I received some emails asking me questions about Pomm on my private email or github issue and I thought these should profit to anyone interested.</p><p>Enjoy.</p>	t
pomm-1-0-0-is-out	Pomm 1.0.0 is out !	2012-02-29 20:59:57.669702	2012-02-29 20:59:57.669702	\n<p>For this special occasion, this shiny new website showed up, great thanks to twitter guys and their bootstrap project, it is really aweswome.</p><p>As stated in the previous blog article, Postgresql is a superb relational database system that can let you deal with your data as objects. With that in mind, I started to play with objects and arrays but the converter system quickly showed limitations. The heart of <i>Pomm</i> has been recoded and now, it can handle arrays of objects containing arrays of objects.</p><p>The possibilities offered are immense as you still can benefit from the constraint and relational system to get data consistency and in the same time, issue queries that shape your data in a nice way and minimize the PHP complexity. The example of the query that returns the author and all his blog posts in an array illustrate how handy such method is coupled with <i>Pomm</i> converter system.</p><p>Even if the converter is one of the best features provided by <i>Pomm</i>, it should not hide others that help you along your developments: Collection and Pager classes, the fields methods, filters, Where class have all been coded because they were needed at one point.</p><p>This pragmatic approach makes <i>Pomm</i> the rapid development tool to empower your PHP script with all Postgresql goodnesses. The best being kept for the end, <i>Pomm</i> keeps you as close as possible to de database so your applications are faaaaaaaaaaaaaast whatever you make them in plain PHP or using a framework like <a href="http://silex.sensiolabs.org/">Silex</a> or <a href="http://symfony.com/">Symfony2</a>.</p><p>Take care and enjoy !</p>\n	t
important-bugfix-1-0-1-is-out	Important bugfix: 1.0.1 is out	2012-03-09 13:32:20.261845	2012-03-09 13:32:20.261845	<p>In order to fix an important bug in the base map class generation, the 1.0.1 is available sooner as expected. The bug was arrays were generated to incorrect types that ware not handled by any converter. Unfortunately the map generator was the only part missing in the test suite. More sad is the fact that the 1.0.0 version was released with this bug.</p>\n<p>Another point, there is a new little feature in the <code>PgEntity</code> converter: the <code>_extra</code> field. This is used to handle any extra field that would come with a table composite data in query like shown in <a href="http://pomm.coolkeums.org/documentation/examples#objects">this code example</a>. Regardless to this specific feature, it is important to set up a release and version policy at this point. Can extra features be added into a mainstream release? I think not because it makes the documentation obsolete and can introduce side effects in the way the API is used. From now, <strong>the 1.0 branch will not include any new feature</strong>.</p>\n<p>The last point is about PHP namespaces used in the generated map files. The name provided as option to the database constructor (or to the <code>Service</code> class) is used. If not provided, the real database name is used which can lead to problems when different database names are used between the development and the production environments. This <code>name</code> options was implemented but not documented.</p>\n<p>With this release, Pomm project is providing the best release so far.</p>	t
pommguard-new-extension-for-silex	PommGuard: New extension for Silex.	2012-03-22 20:04:06.489899	2012-03-22 20:04:06.489899	 <p>I am happy to release a new service provider for the <a href="http://silex.sensiolabs.org/">Silex µ-framework</a>. <a href="http://packagist.org/packages/ghub/pomm-guard-service-provider">PommGuardServiceProvider</a> is an authentication and authorization manager that provides \n<ul>\n  <li>simple mechanisms to protect your controllers using the new <a href="http://silex.sensiolabs.org/doc/usage.html#route-middlewares">route middlewares feature</a></li>\n  <li>users, groups and credentials</li>\n  <li>out of the box simple solution</li>\n</ul></p>\n<p>One of the greatest strength of that system is <em>extensibility</em>. Using Postgres inheritance, you can easily extend given users and groups to create your own profiles. See the <a href="https://github.com/chanmix51/PommGuardServiceProvider">documentation</a> for more details. Enjoy.</p>	t
pomm-1-0-3-is-out-and-development-branch-forked-to-1-1	Pomm 1.0.3 is out and development branch forked to 1.1	2012-05-31 08:42:16.405929	2012-05-31 08:42:16.405929	<p>The last revisions of Pomm 1.0.x did fix some serious limitations about the field content size in arrays or entities. It sounds Pomm can now handle content up to the maximum default size allowed by postgresql in a faster way. The 1.0 branch will now continue its life, only bugs and security issues will be fixed on this branch. This ensures the documentation to be up to date and you to be able to easily migrate from one minor to another without facing problems.</p>\n<p>In the same time, the master branch will add new features as there are already some requests pending in github. Do not hesitate to express yourself on what you would like to add to or remove from Pomm.</p>	t
2-talks-about-postgres-and-pomm-in-june-2012	2 talks about Postgres and Pomm in June 2012	2012-04-11 18:50:55.65792	2012-04-11 18:50:55.65792	<p>I am really happy to announce I am going to talk about Postgresql during the <a href="http://paris2012.live.symfony.com/speakers">Symfony live 2012 in Paris</a>. While this conference will be mostly about how to take advantage of Pg features in web development I will finish it with presenting Pomm. This talk will be in English and the sf live is planned on 7-8th of June. In case you would be more interested into Pomm, I will also participate to <a href="http://afup.org/pages/forumphp2012/">the PHP forum in Paris</a>. Even thought the conference is at the same place (Cité universitaire de Paris) this one will be in French and 2 days before (5-6th of June).</p> \n<p>More info on this blog later...</p>	f
use-form-with-pomm-in-silex	Use form with Pomm in Silex	2012-11-21 15:05:38.015034	2012-11-21 15:05:38.015034	\n<p>One may be tempted to use Postgresql's nice constraint system to validate forms but it is indeed a bad idea. Forms are business oriented rules, there can be multiple forms with multiple validation rules for the same group of database objects. Moreover, these rules can change often. Coding them in the PHP layer is by far a best choice and Symfony provides two components: <a href="https://github.com/symfony/Form [Form component]">form</a> and <a href="https://github.com/symfony/Validator [Validator component]">validator</a>. These components are integrated in the Symfony Standard Edition Framework but they can also be used with your own development framework and ... the <a href="https://github.com/fabpot/Silex [Silex]">Silex µ-framework</a>.</p>\n\n<p>This post will show a small example on how to create and validate form using Silex.</p>\n\n<h2>Form class creation</h2>\n\n<p>If you read the <a href="http://symfony.com/doc/current/book/forms.html [Symfony documentation]">documentation</a> of the Form component you could be puzzle about how to set up your forms amongst the many ways made possible by this nice piece of software. The <a href="http://silex.sensiolabs.org/doc/providers/form.html [Silex Form documentation]">Silex documentation</a> also proposes a simple and efficient way to achieve validation with forms. The first difference with the documentation is that we are using Pomm hence non <a href="http://en.wikipedia.org/wiki/Plain_Old_Java_Object">POPO</a> entities. Since entities values are not stored in real attributes nor use real getters, it is not possible to use the java-ish implementation of the validator metadata classes. </p>\n\n<p>Fortunately, the Form component is very modular and accepts to declare validation rules directly with from the FormBuilder. Let's create a Form class in a dedicated namespace of our application:</p>\n\n<script src="https://gist.github.com/4124003.js?file=Comment.php"></script>\n\n<p>What do we have here ?</p>\n\n<p>A class that extends the <code>AbstractType</code> and implements the two abstract methods needed to create a form: </p>\n\n\n<ul>\n<li><code>buildForm</code> is trigged by the form factory to describe the form.</li>\n<li><code>getName</code> is used to store the form's values.</li>\n</ul>\n\n\n<p>The great thing here is the form builder accepts validation rules as parameter of each field allowing developers to set in one shot fields definition and validation.</p>\n\n<h2>Set up the form</h2>\n\n<script src="https://gist.github.com/4124003.js?file=app1.php"></script>\n\n<p>This controller's goal is to display a blog post and a form for comments. The first lines retrieve the blog post with all its comments (if any) using a <a href="http://pomm.coolkeums.org/documentation/examples#objects">specific query</a> of the model layer. If the post does not exist, the URL points to a non existent resource and 404 error page is returned. </p>\n\n<p>Then, the form factory is invoked with our <code>Form\\Comment</code> instance as argument and the view is extracted from the form and passed to the template.</p>\n\n<h2>Validate the form</h2>\n\n<script src="https://gist.github.com/4124003.js?file=app2.php"></script>\n\n<p>The code is almost self explanatory. It looks quite the same as the previous example but instead of extracting the view from the form, the <code>validate</code> method triggers the validation set up in the <code>Form\\Comment</code>. It is then easy to check if the form is valid or not. If it is the case, the <code>createAndSaveObject</code> method is called to hydrate and save a comment object from the cleaned values. </p></div>\n	f
pomm-1-1-0-is-available	Pomm 1.1.0 is available	2012-12-11 23:17:47.527012	2012-12-11 23:17:47.527012	\n<p>It all started with <a href="https://github.com/chanmix51/sfPgLookPlugin/tree/9655db285df5eb57b1871b3f0542c589d786e48e">symfony 1 PgLook plugin</a> 3 years ago. Pomm's first commit was made nearly 2 years ago and today, Pomm 1.1.0 is out.</p>\n<p>During this time spent in making Pomm a better Object Model Manager, the initial idea that was lurking under years of practice of ORMs and PDO sprung up. Relational databases have been made to manipulate sets of data. By definitions sets are extendible and are hard to fit in the OOP world were classes must be defined and typed. Pomm now comes with a rich API that provides fields selector methods and formatters so programmers can shape sets using Postgres unique features and hydrate them into PHP objects.</p>\n<p>Pomm 1.1 features Postgresql 9.2 range and json type support. The HStore support has been greatly enhanced, you can really use HStore to save any PHP associative arrays as long as they contain strings. Collections fetched from the database can be easily exported to array to ease php's Json transformation needed when coding a web service ... There are a lot more features coming with this release, all born from the pragmatic necessity of real life projects.</p>\n<p>Programmers are able to leverage the power of their relational database trough using SQL and in the same time benefit from a handy object oriented model manager. Some of them showed enthusiasm, some other gave support, reported bugs and posted pull requests on github. Many thanks to all who did contribute to make Pomm a better software.</p>\n	f
2-years-of-pomm	2 years of Pomm	2013-01-10 10:13:51.840163	2013-01-10 10:13:51.840163	\n<p>Formerly, it was <a href="">sfPgLookPlugin</a>, a symfony1 plugin. The 10th January 2011, <a href="https://github.com/chanmix51/Pomm/tree/c437c765f407459dd35594dc151c32140e8315f8">Pomm's first commit</a> was pushed to Github. Since this day, Pomm has evolved based on the needs of real world projects.</p>\n<p>Its first feature -- alongside being an object model manager -- was the converter, because 't' and 'f' were pretty poor boolean in PHP. After that, came the need of being able to deal with custom types hence database objects, data mapper, database inspector, inheritance support and so on.</p>\n<p>It is still a great pleasure to use Pomm in today's professional projects. It allows to set up very quickly models based on complex database structures and wrap PHP around Postgresql's features. It has often been a question from people hearing about Pomm for the first time: "Are you saying we should set business logic in the database ?". Of course they are no universal good answer to that, I use to say "It depends how frequently your business rules change". I use to store slugification, password hashing, list ordering in the database because these tend not to change over time and it makes my PHP layer simpler to assume the database is doing the job. This would also work for every application or script using the database.</p>\n<p>There are today two versions of Pomm, 1.1 being the latest stable. Thank you to all people who did participate with their feedback, emails, bugs submission or push request. 1.0 version will be maintained for bugs and security issues until 1st of March. The 1.1 version will then be the stable version until a 2.0 version comes out.</p>\n	t
pomm-1-1-1-is-out	Pomm 1.1.1 is out.	2013-02-12 14:19:00.53107	2013-02-12 14:19:00.53107	\n<p>This is a maintenance release.</p><p>It fixes an annoying bug in the maps classes remote collection filter.</p><p>Since Pomm has been tested on amazon cloud, it appeared the dash character was not allowed in DSN. This is now fixed.</p>\n	t
a-new-tutorial-for-pomm	A new tutorial for Pomm	2013-02-25 20:48:49.838977	2013-02-25 20:48:49.838977	\n<p>I am happy to announce the availability of a <a href="https://github.com/chanmix51/elcaro/tree/english">new tutorial</a> for Pomm. It has been a very interesting collaborative work with <a href="https://github.com/jubianchi">Julien Bianchi</a>, <a href="https://github.com/sanpii">Nicolas Joseph</a> and <a href="https://github.com/pborreli">Pascal Borreli</a>. </p>\n<p>With a simple example of employees belonging to departments, we can go trough several of Pomm's nice features like elastic objects and fields formatters while writing a Postgresql recursive query.</p>\n<p>The feedback we have about it mention it takes a couple of hours to get it done and people feel confident to go for a Silex or Symfony project using Pomm after the tutorial. So far so good. Enjoy !</p>\n	t
pomm-s-french-tutorial-on-developpez-com	Pomm's French tutorial on developpez.com	2013-02-27 10:04:03.743017	2013-02-27 10:04:03.743017	\n<div>\n<p>Thanks to <a href="https://twitter.com/MaitrePylos">MaitrePylos</a>'s work, the french version of the tutorial is available on <a href="http://www.developpez.com/index/redirect/15900/Pomm-un-gestionnaire-de-modele-objet-dedie-a-PostgreSQL-un-article-de-Gregoire-Hubert/">developpez.com</a>. </p>\n<p>Do not hesitate to post your feedback on the <a href="http://php.developpez.com/actu/51913/Manipulez-vos-donnees-avec-Pomm-un-ORM-PHP-pour-PostgreSQL/">dedicated topic</a>.</p></div>	t
pomm-1-1-2-important-update-please-read-below	Pomm 1.1.2 - Important update, please read below.	2013-04-08 21:59:27.171718	2013-04-08 21:59:27.171718	\n<p>Pomm 1.1.2 is out. This version fixes 2 bugs. The first one was the Connection instance to create two different map instances -- using the `getMapFor()` method -- depending if the asked corresponding entity class name had leading backslash or not. This fix can speed up things and solve discrepancies that could occur when setting environment dependent changes in map classes.</p>\n\n<p>The second patch (submitted by <a href="https://github.com/jeremyFreeAgent">jeremyFreeAgent</a>) fixes a functional bug in the BaseObject class. Before this patch, as soon as a new getter was written, the attribute was declared to exist using the method `has()`. This behavior allowed inexistent attributes to be deleted using `clear()` that lead to an error.</p>\n\n<script src="https://gist.github.com/chanmix51/5339848.js?file=gistfile1.php"></script>\n\n<p>This behaviour is important because if you imagine the following entity:</p>\n\n<script src="https://gist.github.com/chanmix51/5339848.js?file=gistfile2.php"></script>\n\n<p>The `getMeMore()` getter returns the result of the division of A by B. If this getter is used when B equals 0, it will lead to an unguessable error since `hasMeMore()` would always return true by default. This makes developers to have to implement the corresponding `has` method when extending entities.</p>\n\n<p>Of course this change makes entities base accessors consistent: has(), set(), get(), clear() and add(), only manage values in entities internal container while your accessors do the rest.</p>\n\n<p>But this patch also changes the behavior of entities since calling `has('virtual_accessor')` now returns false even if a `hasVirtualAccessor()` method is declared in the according entity. This can lead to errors in existing applications especially in templates where these kind of tests are the more likely to be found. </p>\n\n<p>It is important to test your existing applications before deploying this release in production. You can set your `composer.json` to point to the 1.1.1 version while you take the time to ensure the change does not trigger any unwanted effects. </p>\n\n<p>Aside of that, Pomm had a very nice welcome from the Symfony live's audience where it has been presented last week and the project's activity has never been that high. Interesting times are ahead.</p>\n	t
conference-about-pomm-silex-and-symfony-at-the-symfony-live-paris-2013	Conference about Pomm, Silex and Symfony at the Symfony Live Paris 2013.	2013-03-12 14:33:44.855741	2013-03-12 14:33:44.855741	\n<p>I will talk (in French) about Pomm at the <a href="http://paris2013.live.symfony.com/speakers">Symfony live</a> between the 2nd and the 6th of April in Paris. The conference will be about Pomm integration in developments using Silex or Symfony. Practical examples will be provided to show how the leverage Postgresql's power from your web applications.</p>\n\n<p>As I am still preparing the conference, if there is something you think that should be mentioned (real life example, feedback etc.), feel free to poke me or let a comment below.</p>\n\n<p>Of course, I will be happy to meet anybody with interest into Pomm in Paris during this time, see you there !</p>\n	t
pomm-1-1-0-rc2-is-out	Pomm 1.1.0-RC2 is out	2012-10-30 13:19:18.150559	2012-10-30 13:19:18.150559	<p>After a one month test period, some bugs have been fixed and the identity mapper has been re factored to a simplest and more maintainable implementation. This version has been rewritten with in mind the fact that the identity mapper is not a cache to prevent some queries to be done. It is instead the only method to ensure the same object fetched twice from the database will be represented as a single instance in PHP.</p>\n<p>The <a href="http://pdepend.org/">PHP Depend</a> code analyzer has been run against Pomm sources. The results are shown hereafter:</p><p><img src="/images/pyramid.svg"><em>Overview pyramid</em></p>\n<p>The <a href="http://pdepend.org/documentation/handbook/reports/overview-pyramid.html">overview pyramid</a> shows a number of interesting statistics about how healthy Pomm's code is:\n<ul>\n  <li>The cyclomatic ratio is 0.216 which is average.</li>\n  <li>Code encapsulation is good with an average of a bit more than 11 lines of code per method.</li>\n  <li>Another indicator of encapsulation is the average of 6.3 methods per class, so far so good.</li>\n  <li>The classes per package ratio is a bit low indicating Pomm could grow.... it is not the goal as we want to keep it performance wise.</li>\n  <li>The inheritance indicators still show low complexity in heirs tree.</li>\n  <li>Each method is called by an average of 2.7 times in the code which is good.</li>\n  <li>The low FANOUT/CALLS indicators show each package does not export its complexity outside itself, which is excellent.</li>\n</ul>\n  <p>The coupling indicators are very important as they show how the KISS principles are respected hence make the application maintainable and stable over time. Of course these numbers are to be balanced with the fact Pomm is a little project (approx 11k lines of code) and the values are average with no indication about the variance.</p>\n  <p>Another statistic not dumped by PHPDepend is the test coverage. Theoretically, the number of unit tests should equals the total cyclomatic complexity to ensure every path of the running code is tested. This would mean Pomm should have 955 test assertions to pretend a test coverage of 100%, the actual number of tests are 396. Here again, precaution must be observed as we have no information about the repartition of the test coverage. Some parts may be very well tested whereas some other are poorly covered. A closer look would show that CYLO of the converter system is 78 and there are actually 118 test assertions on this part. In the Tools package, the cyclomatic complexity is a mere 104 and there are only 12 unit tests on this part.</p>\n<p>Last thing: I had excellent feedbacks about the conferences I gave in Paris and Nantes about Postgresql and Pomm. Many thanks to people who got interested into this project, some of them did even post PRs on github. Thank you !</p>	f
the-final-cut	The final cut	2012-02-19 13:04:44.753939	2012-02-19 13:04:44.753939	<p>I thought Pomm was ready to go for stable release but I has a feeling maybe something was missing. I was wrong, there was too much. As I stated in <a href="http://www.coolkeums.org/en/article/your-queries-will-never-be-the-same-again.html">this blog article</a>, Postgresql <em>can manage your tables as objects</em>:</p>\n\n<script src="https://gist.github.com/1863642.js?file=objects.sql"></script>\n\n<p>This syntax is so powerful it makes use of ORMs almost useless with Postgresql as you can shape you queries to retrieve related objects directly. To benefit from this, I introduce the <em>virtual fields</em> feature in the latest commit. This makes you able to associate a select extra field with a converter, even an entity converter. In the example below, adding a virtual field named <code>posts</code> associated with a <code>Post[]</code> entity converter will automatically hydrate your <code>Author</code> instance with an array of <code>Post</code> under the <code>posts</code> accessor.</p><p>This means I will work on updating the documentation and the tutorials using this feature in place of the remote fields. Adding the virtual fields feature was something like 5 lines of code and it makes the remote collection obsolete. This code will disappear from the next release, it is always good to see when adding just a bit of code can reduce the code size.</p><p>Stay tuned, more to come soon.</p>	f
conference-about-omm-and-pomm-at-the-french-pgday-2013	Conference about OMM and Pomm at the French PgDay 2013.	2013-04-17 11:37:03.875739	2013-04-17 11:37:03.875739	\n<p>I am happy to announce I have been selected to talk about OMMs and more particularly about Pomm at the French PgDay that will happen in Nantes the 13th of June.</p>\n\n<quote>une journée de conférences et d'échanges sur le thème du SGBDR open source PostgreSQL. Cette journée sera également l'occasion de rencontrer les acteurs de la communauté PostgreSQL.\n\nQue vous soyez DBA, architecte, développeur, chef de projet utilisant PostgreSQL, vous découvrirez des retours d'expérience d'autres utilisateurs, ainsi que des présentations techniques de PostgreSQL, de PostGIS (cartouche spatiale) ou d'autres extensions. Cette journée est organisée par la communauté francophone des utilisateurs de PostGreSQL, avec le soutien de plusieurs entreprises partenaires (SMILE, Dalibo).</quote>\n\n<p>You can subscribe now <a href="http://www.pgday.fr/inscriptions">here</a> if you are not scared by attending 9 high quality talks about PostgreSQL in French.</p> \n	t
pomm-1-1-3-is-out	Pomm 1.1.3 is out	2013-06-06 10:10:38.911727	2013-06-06 10:10:38.911727	\n<p>This is a bugfix release. It sums the work of <a href="https://github.com/adrienbrault">Adrien Brault</a>, <a href="https://github.com/eneault">Éric Neault</a> who made a great work for this release and <a href="https://github.com/FabienD">FabienD</a> for his work on PHP 5.5 compatibility. Huge thanks to them.</p>\n	t
feature-highlight-the-where-query-builder	Feature highlight: The Where query builder.	2013-07-09 11:59:09.591764	2013-07-09 11:59:09.591764	 \n<p>It often happens you can not know in advance what is the condition of your query going to be. Take by example the search form of an electronic part store web site. Just for the resistor component, the possible search criteria are:</p>\n<ul>\n<li>value in ohms from 0.1 to 10 million with more than 20 possible values in every power of ten.</li>\n<li>precision (0.1%, 1%, 5% and 10%)</li>\n<li>power dissipation from 0.125 to 100W</li>\n<li>type (carbon, metal, wire wound, cement, dissipated)</li>\n</ul>\n<p>A real shop would have more criteria than this but this is a good start since it already makes several thousand possible choices.</p>\n<p>Let's start with a simplistic (and unrealistic) approach that would make users to be able to select at most only one value of each field. The returned data is then an array of values formatted as follow:</p>\n<p>[ "value" =&gt; "2200", "precision" =&gt; "10", "power_dissipation" =&gt; "1", "type" =&gt; "metal" ]</p>\n<p>Needless to say these values <strong>MUST</strong> be validated and cleaned before being used for our database.</p>\n<p>Of course, less or even none of the values are possible. How to handle this search and the case no criteria is entered ? This is exactly what the <code>Where</code> class stands for.</p>\n<pre><code class="php">&lt;?php // /Store/Catalog/ResistorMap.php\n// ...\n\n    public function search(Array $criteria)\n    {\n        $where = new \\Pomm\\Query\\Where();\n\n        foreach ($criteria as $field =&gt; $value)\n        {\n            $where-&gt;andWhere(sprintf(&quot;%s = ?&quot;, $field), array($value));\n        }\n\n        return $this-&gt;query($where); // SELECT ... WHERE field1 = ? AND field2 = ? AND ...\n    }\n</code></pre>\n\n<p>This simple example shows how handy the <code>Where</code> class is. It handles the values for us and formats the where condition by itself. The issued query for the fields given in the array above would be :</p>\n<pre><code class="sql">SELECT \n  component_reference,\n  name,\n  value,\n  precision,\n  power,\n  type\nFROM\n  catalog.resistor\nWHERE\n    value = 2200\n  AND\n    precision = 10\n  AND\n    power_dissipation = 1\n  AND\n    type = 'metal'\n;\n</code></pre>\n\n<p>What if no criteria is passed to the search method ? The Where instance would have no criteria nor data and would issue the following query:</p>\n<pre><code class="sql">SELECT ... WHERE true;\n</code></pre>\n\n<p>The Postgresql's planner will instantly understand this where clause to be always true and discard it with no performance loss.</p>\n<p>What if we allow our user to select multiple values for each criteria ? The array returned by the form now looks like:</p>\n<pre><code>[ "value" =&gt; ["1000", "1200", "1500", "1800", "2000"], "precision" =&gt; [ "5", "1", "0.1" ], "power_dissipation" =&gt; [ "1" ], "type" =&gt; [ "metal", "wire wound" ] ]\n</code></pre>\n<p>This means we want all resistors with values of 1000 OR 1200 OR ... AND precision equals to 5 OR 1 OR 0.1 AND power_dissipation = 1 AND ...</p>\n<p>The search method becomes:</p>\n<pre><code class="php">&lt;?php // /Store/Catalog/ResistorMap.php\n// ...\n\n    public function search(Array $criteria)\n    {\n        $where = new \\Pomm\\Query\\Where();\n\n        foreach ($criteria as $field =&gt; $values)\n        {\n            $sub_where = new \\Pomm\\Where();\n\n            foreach ($values as $value)\n            {\n                $sub_where-&gt;orWhere(sprintf(&quot;%s = ?&quot;, $field), array($value));\n            }\n\n            $where-&gt;andWhere($sub_where);\n        }\n\n        return $this-&gt;query($where); // SELECT ... WHERE (field1 = ? OR field1 = ?) AND (field2 = ? OR ...\n    }\n</code></pre>\n\n<p>Note how the clause builder handles the logical precedence using parenthesis. Although this query is correct from a logical point of view, it creates a complex query the planner may not optimize well, it would be easier and better if using the <code>IN</code> SQL operator:</p>\n<pre><code class="php">&lt;?php // /Store/Catalog/ResistorMap.php\n// ...\n\n    public function search(Array $criteria)\n    {\n        $where = new \\Pomm\\Query\\Where();\n\n        foreach ($criteria as $field =&gt; $values)\n        {\n            $where-&gt;andWhere(\\Pomm\\Where()::createIn($field, $values));\n        }\n\n        return $this-&gt;query($where); // SELECT ... WHERE field1 IN (?, ?, ?) AND field2 IN (?, ?)\n    }\n</code></pre>\n\n<p>The good news is that the where class manages the variable number of values to escape.</p>\n<p>This method is probably good enough for the majority of catalog search but, knowing our business makes us able to do the things a bit better. We know by example a user would not look for all resistors of either 1000 or 2000 ohms but resistors between 1000 and 2000 ohms. On the same principle, a user would not look for resistors able to dissipate either 1W or 10W but all resistors between 1 and 10W.\nA simple javascript widget would make users able to select <em>ranges</em> of values sending only the first and the last value of the range. The form values would then be formatted like this:</p>\n<pre><code>[ "value" =&gt; ["1000", "2000"], "power_dissipation" =&gt; ["1", "10"] ]\n</code></pre>\n<pre><code class="php">&lt;?php // /Store/Catalog/ResistorMap.php\n// ...\n\n    public function search(Array $criteria)\n    {\n        $where = new \\Pomm\\Query\\Where();\n\n        foreach ($criteria as $field =&gt; $values)\n        {\n            $where-&gt;andWhere(sprintf(&quot;%s BETWEEN ? AND ?&quot;, $field), $values);\n        }\n\n        return $this-&gt;query($where); // SELECT ... WHERE field1 BETWEEN ? AND ? AND field2 BETWEEN...\n    }\n</code></pre>\n\n<p>A mix of this solution with the <code>IN</code> is required to handle the resistor type which cannot be set in a range. Talking about ranges, Postgresql 9.2 users would like to take advantage of the <code>range</code> type with operator as powerful as "overlap" or "adjacent". </p>\n\n	t
pomm-1-2-is-on-the-launchpad	Pomm 1.2 is on the launchpad	2013-09-16 17:57:09.931758	2013-09-16 17:57:09.931758	\n<div class="body">\n<p>9 months after the 1.1 release, the first release candidate of the 1.2 version is out. This kind of blog posts often mention that is has been a tough work to make this release to happen but, here, it is not the case. The main word of this release was "Keep It Stupid and Simple" and as such, time has been taken to ensure chosen solutions were the best fit.</p>\n<div class="section" id="pomm-now-uses-php-s-native-postgresql-api">\n<h3>Pomm now uses PHP's native Postgresql API</h3>\n<p>And this is a huge improvement ! The first thought is going to speed gain this change triggers. But this also makes the converters to be simplest and more efficient in addition of making the binary converter to fully support arrays.</p>\n</div>\n<div class="section" id="re-usable-prepared-statements">\n<h3>Re-usable prepared statements</h3>\n<p>In past versions of Pomm, every time a query was made, it was prepared, run and destroyed. If the query was to be issued again, the process was iterated over and over. It is not the case anymore, every prepared statements are buffered in the Connection class ans re used if necessary. This also leads to a dramatic performance gain. Another difference from Pomm's previous versions is that you can use prepared statements directly by yourself.</p>\n</div>\n<div class="section" id="connections-made-configurable">\n<h3>Connections made configurable</h3>\n<p>It is now possible to SET Postgresql environment variables at connection's start. Default interval style and timestamp style are enforced this way using ISO8601 standard which makes the according converters to be faster and simpler. It is now a lot easier to code a converter associated with a special formatted type.</p>\n</div>\n<div class="section" id="escapable-values">\n<h3>Escapable values</h3>\n<p>In previous versions of Pomm, it was not possible to save an object using Postgresql function to set some of its values. It is now possible to set escaped commands in entities values so they are interpreted in Postgresql :</p>\n<blockquote>\n<p>&lt;?php</p>\n<dl class="docutils">\n<dt>$entity = $entity_map-&gt;createAndSaveObject(</dt>\n<dd>array('data1' =&gt; new PommTypeEscape("my_schema.my_pg_function('something')")));</dd>\n</dl>\n<p>echo $entity['data1']; // the result of Postgresql function my_pg_function('something')</p>\n</blockquote>\n</div>\n<div class="section" id="code-clean-up">\n<h3>Code clean up</h3>\n<p>The connection <cite>filterchain</cite> has disappeared, so have the <cite>Collection</cite> and <cite>SimpleCollection</cite> classes replaced by a single <cite>Collection</cite> class. The Collection filters have been rewritten to a simpler implementation.</p>\n</div>\n </div>\n	t
pomm-1-1-4-is-out	Pomm 1.1.4 is out	2013-10-28 13:00:31.543735	2013-10-28 13:00:31.543735	\n<div id="preview_div">\n<p>I am happy to announce that 5 months after the previous version, Pomm 1.1.4 has been released this week end. It appeared a significant number of corrections justified a new version. The changelog contains the following:</p>\n<ul>\n<li>Bug in the string converter with empty string and NULL</li>\n<li>Lot of typos were found in the documentation</li>\n<li>Added missing method getMaxPerPage in the Pager class</li>\n<li>Bug in PDOFilter Exception</li>\n<li>Bug with intervals interpretation</li>\n</ul></div>\n	t
pomm-1-2-rc2-is-out	Pomm 1.2-RC2 is out	2013-11-05 09:50:30.771766	2013-11-05 09:50:30.771766	<p>We are pleased to inform you the "1.2-RC2" release has been tagged last night. It is somehow unusual to see a Release Candidate version to propose new features, but as this shiny new version of Pomm has been tested on development sites, it appeared we were two fingers from some useful functionalities it would have been foolish not to craft Pomm 1.2 with.</p>\n<p>One of the most missed features from any other database framework is the Postgresql's asynchronous message system (LISTEN / NOTIFY). This makes programmer able to use the database as event dispatcher to trigger asynchronous and parallel jobs.</p>\n<p>Another missing feature was the ability to save several objects in one move. The <code>createAndSaveObjects()</code> map class's method takes an array of value sets, saves it to the database using one INSERT and returns directly a collection of entities. This is particularly handy when dealing with web services or CSV files.</p>\n<p>Aside of these functionalities, some bugs were fixed, the test coverage has been extended to include PHP 5.3 and Postgresql from version 9.0. The main documentation has been updated. </p>\n<p>Proof readers and testers welcome !</p>	t
why-pomm	Why Pomm ?	2012-09-21 16:32:56.17791	2012-09-21 16:32:56.17791	\n <p>I recently received comments which are very very useful to know what people think about Pomm project after just having taken a glance at the official website. I will comment back here a couple of negative comments.</p>\n <div class="section" id="pomm-is-the-doctrine-of-the-poor">\n <h1>Is Pomm the Doctrine of the poor ?</h1>\n <p>Let's begin where it hurts:</p>\n <pre class="literal-block">\n   Pomm claims no to be an ORM but I do not perceive the difference.\n  It looks like Doctrine with less features and specific to Postgresql.\n </pre>\n <p>Well, this indicates hundred of people who visited Pomm's website left thinking the same thing. In fact, Pomm shares almost nothing with Doctrine as the underlying philosophy is utterly different.</p>\n <p>Pomm does not need the high level abstraction of an ORM because it relies on Postgresql's features. Postgres already has some object oriented features. You can manage data from tables as they were objects and fetch relations directly in your SQL queries. Pomm with its converter system takes advantage of that. Instead of trying to create an object  abstraction over a relational set of data, it just transposes what's in Postgres to PHP.</p>\n <p>This is a big win because the 40 years old SQL language has been made for querying and presenting data. Developers using it are able to directly extract from the database the data they want presented in the best way for their business process needs. This makes the PHP code slim, fast and easy to test. This is also a big win from the performance perspective.</p>\n <pre class="literal-block">ORMs is what you get when object oriented programmers code a data store over a relational database.\n Postgresql is what you get when relational database developers code an object oriented data store.\n </pre>\n <p>On the other side, PHP which is often bashed for the weak typing and its loose object structure is a perfect match when it gets to be married with SQL. SQL is a strongly typed declarative paradigm language dedicated to the data crossing and presentation. PHP is an imperative paradigm language good at creating web workflows. It can map elastic objects over result-sets returned by SQL as soon as you sandwich a nice data converter between those two layers. This is what Pomm is. Let Postgres manage relations between objects and return you the data your business needs so Pomm map them to PHP objects.</p>\n <p>Pomm's converter is the most tested part of Pomm. It allows you to fetch from Postgres objects that contain arrays of objects containing arrays of objects and so on. It supports HStore key value stores and map them to PHP associative arrays. It supports Pg's geometric types and many more (xml, json, ranges etc.). You can even define your own types like you would do in an object oriented paradigm and tell Pomm what PHP representation you want to link them with.</p>\n <p>In an ORM world, classes are strongly coupled to tables, with Pomm, classes are loosely coupled to sets. You can define a map class that is tied with <tt class="docutils literal">VALUES ('pika', 'chu')</tt>. Of course the <tt class="docutils literal">findAll()</tt> method of such class would always return one instance with the same values but isn't that by example what you want in a test suite ?</p>\n </div>\n <div class="section" id="it-s-all-about-tools">\n <h1>It's all about tools</h1>\n <p>It is not my intention to reopen the <a class="reference external" href="http://www.codinghorror.com/blog/2006/06/object-relational-mapping-is-the-vietnam-of-computer-science.html">ORM war</a> here nor to say bad things about Doctrine. As another comment said:</p>\n <pre class="literal-block">\n Doctrine2 is all-right for all the developers needs.\n </pre>\n <p>And that's as true as thinking you can almost do <a class="reference external" href="http://www.revision-zero.org/orm-haters-do-get-it">every kind of work</a> with a swiss army knife so why would you be interested in <a class="reference external" href="http://www.craigkerstiens.com/2012/04/30/why-postgres/">specialized tools</a> ?</p>\n <p>I do valve amplifiers as a hobby aside my real job and I started working steel enclosures with a Dremel. I found this hard, I was very bad at it and the result was just acceptable. I am not saying Dremel is bad -- I still use it almost everyday -- but since this time I have bought a professional drill set with a real drill and guess what: the <strong>job is perfect and done in less time</strong>. As the implementation part stopped being an obstacle, I began to have new ideas I couldn't even imagine before. On the other hand, I cannot use these drills on a concrete wall nor a piece of wood without damaging them and obtaining poor results. That's a question of choice, mine is to use the right tool for the right job.</p>\n </div>\n	t
feature-highlight-composite-types	feature highlight: composite types	2013-11-17 16:28:28.023727	2013-11-17 16:28:28.023727	\n<p><a href="http://www.postgresql.org/docs/9.3/static/rowtypes.html" title="Postgresql documentation">Composite type</a> is a way to represent structured data as part of other data. One example is user postal address. In a lot of cases, addresses are structured in a different table and programmers use a join to fetch the user with its address as an object. From a business perspective, address are never used alone so they should not have their own set. From a performance point of view, this join is really expensive as soon as there are search on every users living in a given city.\nAn other approach is to store directly address fields with the user, making the address indistinctly part of it. From a business perspective, this is bad because the attribute « zipcode » of the user is not a direct attribute. The good way is to create a <code>Address</code> object and grant users with it as attribute.</p>\n\n<script src="https://gist.github.com/chanmix51/7447181.js?file=address_type.sql"></script>\n\n<p>Doing so, requires the database layer to understand how to deal with database field output like</p>\n<pre><code>("27, route des fleurs", "61270", "RAI",)\n</code></pre>\n<p>Pomm 1.2 comes with a converter named <code>PgRow</code> to handle row fields. The converter must be fed with the structure of the expected row and it might also been told what class to use to instance an Address field type with the data provided by the database. If a type class is missing, data will be returned as array.</p>\n\n<script src="https://gist.github.com/chanmix51/7447181.js?file=pg_row.php"></script>\n\n<p>In the code above, the converter is told to create instances of `\\My\\Database\\Type\\AddressType\\ class with the converted data.</p>\n\n<script src="https://gist.github.com/chanmix51/7447181.js?file=AddressType.php"></script>\n\n<p>Pomm also comes with a generic (ie abstract) class for this kind of data type: the <code>Composite</code> type. Children of this class just have to declare as public attributes, the data to be exposed. Using it becomes as easy as:</p>\n\n<script src="https://gist.github.com/chanmix51/7447181.js?file=show_customers.php"></script>\n\n<p>Of course, it is possible to enrich this type class with getters and setters.</p>\n<h2 id="searching">Searching</h2>\n<p>Searching on one of the composite type's field is as easy as searching on any other fields of the customer's table. Say we want to fetch all the customers living in cities having more than 4 characters in a department with postal code starting with 44:</p>\n<pre><code>$customers = $map-&gt;findWhere("textlen((address).city) &gt; $* AND (address).postal_code ~ $*", array(4, '^44'), 'ORDER BY name LIMIT 10');\n</code></pre>\n<p>Enjoy.</p>\n	t
pomm-1-2-rc3-is-out	Pomm 1.2-RC3 is out	2013-11-22 10:23:47.086837	2013-11-22 10:23:47.086837	\n\n\n\n<p>Good news, it sounds final countdown to Pomm 1.2.0 is reaching its end. This third release candidate release proposes a cleaner source code by far, thanks to <a class="reference external" href="https://insight.sensiolabs.com/">SensioLabs insight(tm)</a> analysing tool. Although Pomm does not own any medal because of the <tt class="docutils literal">eval</tt> statement in the <tt class="docutils literal">HStore</tt> converter, it provided an deep and accurate analysis of the code that could lead to an efficient refactoring. Without this <tt class="docutils literal">eval</tt>, Pomm would earn a silver medal, this time because of the magic methods that animate the <tt class="docutils literal">BaseObject</tt> as flexible objects. These four points prevent Pomm's code source from being <a class="reference external" href="https://insight.sensiolabs.com/projects/5bff04e5-c391-4f91-850f-cf2b3110e222/analyses/5">rated platinum</a>. In an other hand, if Pomm followed admitted good practices, it would be an ORM.</p>\n<dl class="docutils">\n<dt>Since the RC2:</dt>\n<dd><ul class="first last simple">\n<li>timestamps with time zone are now supported.</li>\n<li>a new method appeared to handle aliases in the <tt class="docutils literal">getSelectFields</tt> like methods.</li>\n<li>a new converter for composite types has been implemented.</li>\n<li>composite types can be converted to objects using an abstract composite type.</li>\n<li>bugs in the prepared queries placeholder were fixed.</li>\n<li>code clean up.</li>\n</ul>\n</dd>\n</dl>\n<p>It is now time to use it and provide as much feedback as you can. Road to 1.2.0 is open.</p>\n	t
pomm-1-2-is-available	pomm 1.2 is available	2014-01-21 17:01:06.038852	2014-01-21 17:01:06.038852	\n<h2>Better, simpler, faster</h2>\n\n<p>The 1.2 branch was under development since April 2013 and it has been an interesting time. The heart of Pomm has been deeply remodelled to bring tremendous features and performances.</p>\n\n<ul>\n<li>Pomm uses PHP's native Postgresql API instead of PDO</li>\n<li>Configurable connections</li>\n<li>JSON, timestamp with timezone and composite types converter have been added</li>\n<li>Observer for LISTEN / NOTIFY support</li>\n<li>Prepared statement pooling</li>\n<li>Generic logger support (Monolog)</li>\n</ul>\n\n<p>Even though this sounds like a complete reshape, Pomm 1.2 is usable the same way as 1.1 but with added functionalities.</p>\n\n<p>The switch from PDO to native API showed great performances gain in addition to a better support of Postgresql features. Binary type is fully functional and asynchronous message system is supported. This also could lead to a simpler and better collection system. Prepared statements implementation has also been reworked. Every statement is prepared and pooled in a connection. If a statement is issued twice, the prepared statement is re-used without the developer to care about it.</p>\n\n<p>Converters have also been one of the centers of attention. Connections in Pomm 1.2 now configure database output to make the converter's code faster and more robust. Composite type converter is a big achievement making developers able to create complex types in the database and fetch them as PHP objects easily.</p>\n\n<p>There are tons of other little improvements crafted with this release (raw strings, multiple inserts, improved escaping etc.), they are in the <code>whatsnew</code> in the documentation attached with the project. In the same time, code quality has been greatly improved using both scrutinizer and SensioLabs' insight analyzing tool.</p>\n\n<h2>Migrating from 1.1</h2>\n\n<p>The PDO refactoring led to change the values placeholder in SQL queries, this means all custom SQL queries and <code>Where</code> clauses shall be modified to use <code>$*</code> instead of PDO's <code>?</code>. Migrating may just be it unless you use the filter chain or the remote fields formatters. Both have been removed with no replacement in 1.2. Since the logger has been changed to support generic PSR logger, there might be some adjustments in your development code to instantiate the logger. </p>\n\n<p>If your application benefits from Postgresql's JSON type, be aware the new JSON converters dumps a PHP associative array instead of a string with Pomm 1.1. Range type signature has also changed so if you used super class of these types, you should change the signature accordingly. \nthe blue box...</p>\n	t
pomm-1-0-2-is-out	Pomm 1.0.2 is out	2012-05-03 11:06:44.56989	2012-05-03 11:06:44.56989	<p>I am happy to announce Pomm 1.0.2 release today. This release fixes several bugs, one of them regarding the PgEntity converter. Upgrading is highly recommended.</p>	t
php-tour-2012-in-nantes	PHP Tour 2012 in Nantes	2012-11-13 10:20:21.123012	2012-11-13 10:20:21.123012	\n<p>I am happy to announce I will be present at the <a href="http://afup.org/pages/phptournantes2012/">PHP Tour in Nantes</a> that will take place the 29th and the 30th of November.</p>\n<p>I will be happy to hopefully welcome you to an unconference if you wish to learn more about Pomm. See you there,,,</p>\n	t
welcome-to-pomm-s-website	Welcome to Pomm's website	2011-06-14 10:22:22.969808	2011-06-14 10:22:22.969808	<p>And there are a lot to be said for this first news. Pomm has evolved a lot as I had to work on a <a href="http://www.silex-project.org">Silex</a> project.</p> <ul><li>The <i>Pomm</i> class with static methods is no more and replaced by a new <i>Service</i> class that integrates well with dependency injection containers if you use any.</il>\r<li>The old field types are deprecated and no more supported. They have been replaced by a more convenient <i>Converter</i> system that can be extended to implement your own database composite or enumerated types.</li>\r<li><b>Documentation is available</b> from this site and in a .rst format in the sources.</li>\r<li><i>Tools</i> were scanning the database to generate base map files, they still do of course but also generate the empty map and entity classes.</li></ul><p>The next step is to work on the <a href="http://www.symfony.com">Symfony 2</a> bundle. <br />Enjoy and stay tuned.</p>	t
pommbundle-up-to-date	PommBundle up to date	2011-06-17 11:06:27.946566	2011-06-17 11:06:27.946566	<p>The PommBundle has been deprecated for too long, it was time to make it work again. This is done. The bundle now works with the Pomm's Service class and the Tools have been refactored to integrate well with Symfony 2 command line tools.</p><p>The bundle is available on the download page.</p>	t
go-beta	Go Beta !	2011-06-24 23:32:19.365609	2011-06-24 23:32:19.365609	<p>Pomm has evolved a lot during the last weeks and I am somewhat pleased of what it can do with Postgresql:</p>\n<ul>\n  <li>The converter system to take advantage of geographic, extended or custom composite types</li>\n  <li>Pomm even support embedded entities !</li>\n  <li>Smart methods to easily create the most common queries (including WHERE ... IN)</li>\n  <li>Use of PHP namespaces to deal with Postgesql's schemas</li>\n  <li>Database scanning and PHP code generation</li>\n  <li>You can extend Pomm in your model files with your own types, base classes etc</li>\n  <li>And it is still <strong>fast</strong>, <strong>simple</strong>, and <strong>efficient</strong></li>\n</ul>\n<p>These features have been coded based on the need I had while working on several little websites. A useful website using Pomm will be released soon, there will be a blog post about it. I think it is now time to slow down the changes and to use Pomm on bigger projects. This might be the right moment for Pomm to go beta.</p>	t
beta2	Beta2	2011-07-25 17:18:50.469612	2011-07-25 17:18:50.469612	<p>Pomm second beta release is out. The menu includes new geometric converters (segment and circle) and a (hopefully) bug free HStore converter.</p>\n<p><strong>Important !</strong> The <i>Integer</i> converter has been renamed to <i>Number</i> because it covers integers, numerics and floats. If you upgrade from version beta1, regenerate your base files so converters will be automatically updated. </p>	t
beta4-intervals-and-pagination	Beta4, intervals and pagination.	2011-11-19 08:12:06.857826	2011-11-19 08:12:06.857826	\n<p>I am happy to announce the 4th beta release of the Pomm non ORM. It brings to Pomm really nice features:</p>\n<ul>\n  <li><em>Collection filters</em> make you able to get foreign object from SQL joins.</il>\n  <li><em>a Pager class</em> for convenient pagination.</li>\n  <li><em>Intervals and UUID types</em> are now supported.</li>\n<li><em>MySQL incompatibility</em> due to the unsupported INSERT ... RETURNING *</li>\n</ul><p>More to come soon !</p>	t
major-bugfix-and-code-examples	Major bugfix and code examples.	2011-11-20 20:02:51.073883	2011-11-20 20:02:51.073883	\n<p>An important bug concerning the model files generation has been fixed. Pomm uses the schema name as namespace for the model files but <em>Public</em> is a PHP protected word. The public schema namespace will now be <em>PublicSchema</em>.</p>\n<p>There is now <a href="/documentation/examples"> an example section</a> in <a href="/documentation">the documentation</a> all good ideas are welcome.</p>	t
the-lost-age-of-innocence	The lost age of innocence.	2011-11-26 13:04:22.945785	2011-11-26 13:04:22.945785	<p>Pomm has been under development for a while. It was aimed at being simple, fast, lightweight and efficient. I must say I am pretty happy of what it has become over time and I was very exited when I did implement the filter feature because it made Pomm able to simulate relations between objects. This was also the starting point of a the research for a way to keep consistency between fetched objects from the database.</p><p>A dumb implementation meant 1 instance per fetch, if an object is fetched twice from the database it would have two instances of the same class and the same values. As soon as you create an OO relation using a JOIN it becomes a problem.</p><p>Fortunately Pomm is far from being the first database Object Mapper and this problem has a solution in the name of the <em>Identity Mapper</em> design pattern. This pattern uses an index of fetched objects to ovoid fetching them twice from the database. From my point of view, this makes sense in the Java world where there are application servers that keep running for days and months. In PHP the environment is different. The whole world is instanciated once, the response is sent and then all instances die. This lowers the benefits of the <em>Identity Mapper</em> while making it downsides stronger.</p><p>Keeping an index of all fetched object prevent PHP's garbage collector to work efficiently as we keep at least an instance in the index. Even if I want to be smart and try to check if this instance is modified or not, if I just fetch an instance from the database, modify it and unset it, there is no way I'll be able to fetch this object again from the database, the identity mapper will keep returning me the same broken instance.</p>\n<p>Because it can be bug and feature, I wanted to let the developers be able to manage the <em>IdentityMapper</em> in Pomm. The first question was "Where to store it ?". In the map classes ? As a separate service ? The place I felt the more comfortable with this was the <em>Connection</em> class. You can set a default <em>IdentityMapper</em> class in the database options, but you can also provide an instance in the <em>createConnection()</em> method of the <em>Database</em> class.</p><p>There are 3 different possible classes to choose from: <em>IdentityMapperNone</em>, <em>IdentityMapperStrict</em> and <em>IdentityMapperSmart</em>. The None one is when an identity mapper has been declared for all connections and you explicitly wants none. The strict is very simple: instances are stored and retrieved from the mapper. If you delete an instance from the database, do not forget to unset it from the mapper as well or it will keep providing you with the deleted instance. The smart tries to be a bit more clever. If the instance it got is in the deleted state, it removes it. If the instance it helds has not been modified, values from a fetched objects are merged to the existing instance.</p>\n<p>Of course this does not recover from all the problems the IM can provide but this may be a good compromise in PHP where the goal of this design pattern is not so to limit the query number -- especially with Pomm where developers have a great control over the queries -- but to ensure to keep the existing instances consistent. I think Pomm has made its way to a stable release ... Stay tuned !</p>	t
beta3-is-out	beta3 is out !	2011-09-01 07:46:17.265586	2011-09-01 10:00:33.205477	<p>The third beta version has been released. Fixes where mainly concerning the DSN.</p><p>I have been working in several projects using Pomm recently and I was pleased to see the time saved by using Postgresql's features and model automatic generation. I would like to hear your feedback, drop me an email !</p>	t
pomm-got-rid-of-fetch-all	Pomm got rid of fetch_all	2011-10-05 08:19:25.221868	2011-10-05 08:19:25.221868	This point was bugging me for too long. Collections used to be built with hydrated objects using a fetch_all. This caused very high memory consumption and low performances. It has been replaced using a PDO scrolling iterator. New collection system now hydrates objects on demand from the PDO statement. I did quick benchmarks on my small laptop with 100k records. It takes less than 2 minutes to hydrate and display everything with the old and new system but the new collection system uses 20Mbytes of RAM where the old one uses 200 ! This is a critical improvement in a web production environment. I want to do a bit more testing before going for another beta.	t
pommserviceprovider-available	PommServiceProvider available.	2011-10-07 15:00:00.057806	2011-10-07 15:00:00.057806	The Silex µFramework has evolved. A distinction has been made between extensions that register services and extensions that contain controllers. You can now use the PommServiceProvider with the latest version of this nice, fast and efficient framework. See the README for details on the new way to register the provider. <br />Cheers !	t
pomm-reported-to-work-with-mysql	Pomm reported to work with MySQL !	2011-10-13 08:51:29.4899	2011-10-13 08:51:29.4899	<p>I must say, I am impressed. Some people reported they have been able to use Pomm with Mysql just by changing the way the DSN was handled by PDO in the <i>Connection</i> class. Of course the database introspection does not work, but they used Postgres to generate their model files and just change the DSN to get it to work with MySQL.</p><p>All basic types like string, int, timestamp seem to work, I have no information yet on float and boolean and I have no hope HStore, Circle and other unsupported data type will work with MySQL. Anyway it may cover 90% of simple webstite's needs ;)</p><p>Enjoy !</p>	t
talks-at-phpforum-and-symfony-live-paris-2012	Talks at PHPForum and Symfony Live Paris 2012	2012-06-11 13:09:05.405893	2012-06-11 13:09:05.405893	<p>Hi, thanks to all who followed and participated to my talks about Postgresql and Pomm. There was a nice interest into Pomm and its philosophy so I tried to emphase in what Pomm was different than the classical dbal / orm usual approach.</p>\n<p>The slides for both presentations are online, here is the french <a href="http://pomm.coolkeums.org/phpforum/build/01-introduction.html">Tirer parti de Postgresql en PHP avec Pomm</a> held at the Php Forum. Here is the english <a href="http://pomm.coolkeums.org/sflive/build/01-introduction.html">What can Postgresql do for you</a> at the sf live.</p>\n<p>By the way, the <a href="http://www.coolkeums.org/en/article/pomm-a-concerto-for-php-and-postgresql.html">Concerto for PHP and Postgresql tutorial</a> has been corrected (code and backslashes glitches essentially).</p>\n	t
sflive-paris-2012-video-presentation-is-online	SfLive Paris 2012 video presentation is online.	2012-10-11 16:26:21.277914	2012-10-11 16:26:21.277914	<p>You can <a href="http://symfony.com/video/php-developers-what-can-postgresql-do-for-you/English">access the video from here.</a> Slides are <a href="http://pomm.coolkeums.org/sflive/build/01-introduction.html">also available</a> if you want to really see the slides while watching the presentation.</p><p>Thanks to Sensio and Fabien Potencier for organizing such a nice event.</p>	t
what-s-new-in-pomm-1-1	What's new in Pomm 1.1	2012-10-12 15:22:48.366056	2012-10-12 15:22:48.366056	\n<div class="body">\n<div class="section" id="what-s-new-in-pomm-1-1">\n<div class="section" id="postgres-9-2-types-support">\n<h3>Postgres 9.2 types support</h3>\n<p>Pomm now offers native converters for <strong>ranges</strong> (tsrange, int4range, int8range numrange) and <strong>Json</strong> types. It has better support for <strong>Interval</strong> type and you can directly set PHP <strong>DateTime</strong> instances as parameters of your prepared queries.</p>\n</div>\n<div class="section" id="more-handy-methods-for-your-controllers">\n<h3>More handy methods for your controllers</h3>\n<p>It benefits from Postgresql's <em>RETURNING</em> clause so you can directly write in the database and get the according instance:</p>\n<blockquote>\n<ul class="simple">\n<li><cite>$entity = $map-&gt;createAndSaveObject(array($form-&gt;getValues()))</cite></li>\n<li><cite>$entity = $map-&gt;updateByPk(array('id' =&gt; $form['id']), array('field_to_update' =&gt; $form['field_to_update'], ...))</cite></li>\n<li><cite>$array = $map-&gt;findAll()-&gt;extract();</cite></li>\n<li><cite>$collection = $map-&gt;findAll('ORDER BY created_at LIMIT 5');</cite></li>\n</ul>\n</blockquote>\n</div>\n<div class="section" id="better-entities-and-collections">\n<h3>Better entities and collections</h3>\n<p>The behavior of entities in 1.0 was unclear regarding field detection and NULL values. It was not really possible to delete a field from an entity instance. It is now possible with the <cite>$entity-&gt;clear('my_field')</cite> or <cite>$entity-&gt;clearMyField()</cite> or <cite>unset($entity['my_field'])</cite> method calls.</p>\n<p>The <cite>extract()</cite> method has been changed so it can also flatten any possible embed entities. This is desirable when by exemple dealing with web services to export everything in JSON format. The behavior of the old <cite>extract()</cite> method has been moved in the better named <cite>getFields()</cite> method.</p>\n<p>The Collection had some improvements too. In 1.0, the use of scrollable cursors has been abandoned because this was too obtrusive from a SQL perspective. To be able to scroll on result sets more than once, the Collection system had to cache all the fetched results that could lead to a huge memory consumption. There is a new <cite>SimpleCollection</cite> class that just implements a non rewindable iterator. It does not support hydration filters nor cachine, it just let you foreach once over results as fast as PHP can, which is what you want 99.9% of the time. The <cite>Collection</cite> class is still here providing the same features as 1.0 and it is still the default collection used by Pomm 1.1. You can switch to <cite>SimpleCollection</cite> or whatever other <cite>Iterator</cite> implementation you want just by overloading your map classes <cite>createCollectionFromStatement()</cite> method.</p>\n<p>To end with <cite>Collection</cite> class, all the filter methods now implement the fluid interface so you can register filters and return results without using temporary variable:</p>\n<pre class="literal-block">return $this-&gt;query($sql, $values)\n    -&gt;resetFilters()\n    -&gt;registerFilter($callable1)\n    -&gt;registerFilter($callable2)\n    ;\n</pre>\n</div>\n<div class="section" id="fields-getters-are-awesome">\n<h3>Fields getters are awesome</h3>\n<p>The <cite>getFields()</cite> methods family is one of the coolest features of Pomm allowing developers to add their own fields to all or just in one query. In an other hand, it was tedious to filter fields not to fetch some of them (passwords, technical fields etc.). Fields are now handled as an associative array in the map class with the key becoming the SQL field's alias name so it is now easy to filter fields with PHP's <cite>array_filter</cite> or <cite>array_map</cite> functions.</p>\n<p>Aside of that, it is tedious to always have to</p>\n<pre class="literal-block">join(', ', $map-&gt;getSelectFields(...\n</pre>\n<p>to nicely format SQL queries. Pomm 1.1 comes with two formatters <cite>formatFields</cite> and <cite>formatFieldsWithAlias</cite>. These formatters take a getField method name as first argument. They use it to get the fields and format the output as a string to fit your SQL queries.</p>\n<pre class="literal-block">echo $this-&gt;formatFieldsWithAlias('getFields', 'pika');\n\n"pika.field1" AS "field1", "pika.field2" AS "field2", ...\n</pre>\n<p>There is also the field getters triggered by <em>Collection filters</em>. This was noted as deprecated in the 1.0 version. It is finally kept in the 1.1 version because it may be desirable to split a non nested result set in several entities.</p>\n</div>\n<div class="section" id="generation-tools-are-not-forgotten">\n<h3>Generation tools are not forgotten</h3>\n<p>The 1.0 tools lacked output when used from the command line. There is now a <cite>OutputStack</cite> that manage output messages. Generated schemas and namespaces can be formatted the way you want using a placeholder syntax. It is also now possible to exclude tables from a schema generation task (useful with <a class="reference external" href="https://github.com/joelonsql/PgDeploy">PgDeploy</a> by example).</p>\n</div>\n<div class="section" id="the-last-but-not-the-least">\n<h3>The last but not the least</h3>\n<p>The first task toward the 1.1 version has been to rewrite the whole test suite using PHPUnit. It is now easier to develop features and add the according tests as PHPUnit is very standard in the PHP world. This also makes Pomm testable with Travis the open source continuous integration service. The first side effect of this rewrite has been to spot numerous little bugs and put light on some inconsistent behaviors. Few of them still remain today (ie binary string to Pg's bytea type conversion) but the vast majority have been fixed. Most of those corrections were also backported to the 1.0 branch.</p>\n</div>\n</div>\n<div class="section" id="migrating-from-1-0-to-1-1">\n<h1>Migrating from 1.0 to 1.1</h1>\n<p>Migrating from 1.0 to 1.1 should not be a hassle, here is a list of points that break compatibility between 1.0 and 1.1:</p>\n<div class="section" id="pgentity-refactoring">\n<h3>PgEntity refactoring</h3>\n<p><cite>PgEntity</cite> converter's constructor now takes a <cite>BaseObjectMap</cite> instance as argument instead of <cite>Database</cite> and the class name:</p>\n<pre class="literal-block">// 1.0\n$database-&gt;registerConverter(\n    'WeatherProbe',\n    new Pomm\\Converter\\PgEntity($database, '\\Db\\Weather\\WeatherProbe'),\n    array('weather_probe')\n    );\n\n// 1.1\n$database-&gt;registerConverter(\n    'WeatherProbe',\n    new Pomm\\Converter\\PgEntity($weather_probe_map),\n    array('weather_probe')\n    );\n</pre>\n<p>This is very useful if you want <cite>PgEntity</cite> to deal with a map class that is custom made with extra virtual fields or filters.</p>\n<p><a class="reference external" href="https://github.com/chanmix51/Pomm/issues/30">See the related ticket #30</a>.</p>\n</div>\n<div class="section" id="executeanonymousquery">\n<h3>executeAnonymousQuery</h3>\n<p>This method is now a Connection instance method instead of a Database instance method. <a class="reference external" href="https://github.com/chanmix51/Pomm/issues/29">See the related ticket #29</a>.</p>\n</div>\n<div class="section" id="entity-getter">\n<h3>Entity getter</h3>\n<p>The <cite>get($field)</cite> entity's method throws an exception when the field does not exist in 1.1. In 1.0, the behavior was to return NULL which lead to bugs with typos in method names being silently ignored.</p>\n<p><a class="reference external" href="https://github.com/chanmix51/Pomm/issues/48">See the related ticket #48</a>.</p>\n</div>\n</div>\n </div>\n	t
rc2-is-out	RC2 is out !	2011-12-04 15:06:58.113806	2011-12-04 15:06:58.113806	<p>Lot of good things happened this week. The first good news is the Model files are now in a namespace containing both <strong>database name</strong> and <strong>schema name</strong> to ovoid collision on objects stored in different databases but same schema (public). The way the model files are generated is now completely free, no more mandatory <em>Model\\Pomm\\Entities</em>. It is your decision to store the model files in a strategic place.</p><p>The second good news is <strong>the bytea postgresql type now has its own converter</strong>. You can store images, sound or whatever in the database and retrieve it through your preferred non ORM. As we are talking about converters, the <em>tsvector</em> type is now associated to <em>String</em>. Theses changes allowed us to generate the model for <a href="http://pgfoundry.org/frs/?group_id=1000150">the Pagila database</a>, one of the sample databases that can be found on PgFoundry. That's a big win because this database uses a lot of Pg features.</p><p>The changes in the <em>ScanSchemaTool</em> broke the compatibility in the <a href="https://github.com/chanmix51/PommBundle">PommBundle</a> and the <a href="https://github.com/chanmix51/PommServiceProvider">Silex PommServiceProvider</a>, so be sure to upgrade them if you upgrade Pomm.</p><p>Thanks to <a href="https://github.com/docteurklein">Dr Klein</a> for the very valuable work he did. Take care and enjoy !</p>	t
rc3-is-out	RC3 is out !	2012-01-11 10:53:45.89271	2012-01-11 10:53:45.89271	<p><strong>Happy new year</strong> faithful reader !</p><p>This release comes from some good developers had a look at Pomm's principles and design. The most important change concerns entity classes:<ul><li>They are now fully structure agnostic. They do not know what are the fields stored in the database nor what is their primary key as it is the <em>Map</em>'s job to do so.</li><li>Direct access to attributes triggers accessor overloads if they exist.</li><li>The <em>get()</em> accessor now accepts array of attributes as parameter.</li></ul></p><p>All these changes came from what we thought the best use of Pomm with sf2 form component was. Aside of that, a new <em>Inspector</em> class is born to relieve <em>Tools</em> classes from tedious queries and make them available for your own tools by example. Now more than ever Pomm needs to be tested on small projects, prototypes so we can expect a stable release ... soon :) Take care.</p>	t
views-are-now-supported	Views are now supported	2012-01-15 16:21:53.861601	2012-01-15 16:21:53.861601	<p>Hi ! <br />Well, there is not much more to say about this, views are considered by Pomm as normal tables so unless you specified rules on your views, you can expect your write attempts to fail on such objects.</p><p>The Inspector has also been extended so now it is possible to display stored procedures source code if available. Here is a little PHP script you can use on the command line to display the code. </p><script src="https://gist.github.com/1616300.js?file=show_sp_source.php"></script><p>It can be usefull to put the version of the SP in a comment in the source code so you can always know what's running in your database.</p><p>Take care !</p>	t
rc4-and-tutorial-availability	RC4 and tutorial availability.	2012-02-02 11:34:03.577782	2012-02-02 11:34:03.577782	<p>I am really happy to announce Pomm's 4th release candidate version. A lot of work has been done since RC3 including lot of bug fixed and an transparent new filter chain for queries. This nice feature makes developers able to add code before and / or after each SQL query is sent to the database. The <em>LoggerFilter</em> is the first filter available but you can of course create yours.</p>\n<p> Another important news is there is now an <a href="http://www.coolkeums.org/en/article/pomm-a-concerto-for-php-and-postgresql.html">online tutorial</a> which can get you trough some Pomm's nicest features from scratch. It is a story of an adventure with XML, custom types, views and weather forecast. Hope you'll enjoy it. Take care.</p>	t
1-0-4-is-out-lot-of-bugfix	1.0.4 is out, lot of bugfix.	2012-07-11 19:59:07.648303	2012-07-11 19:59:07.648303	<p>After 1.0 branch forked from the master branch, the first job before going on the development has been to rewrite the tests using phpunit. I can say it really made a difference with the 1.0 test suite. Lot of little (and bigger) bugs were spotted and fixed, these corrections has also been applied in the 1.0 branch: the version 1.0.5 is out.</p>\n<p>There are also a couple of non addressed bugs like the ones found in the binary converter (<a href="https://github.com/chanmix51/Pomm/issues/32">here</a> and <a href="https://github.com/chanmix51/Pomm/issues/31">here</a>). Help would be appreciated if you had any idea on how to do that in PHP.</p>\n<p>As the phpunit migration is nearly over, summer will likely see some of the <a href="https://github.com/chanmix51/Pomm/issues?milestone=4&page=1&state=open">1.1 features</a> implemented in the master branch.</p>\n	t
fall-2012-news	Fall 2012 news	2012-09-10 09:27:08.533879	2012-09-10 09:27:08.533879	<p>The summer has been quite busy for Pomm's project. As the 1.0 branch is become more and more quiet the development branch had a lot of its tickets closed. </p>\n<p>\nAmongst the changes:\n<ul>\n  <li>The tests have been ported to phpunit.</li>\n  <li><code>getFields()</code> method now handle column aliasing.</li>\n  <li>New handy methods in the map class like <code>joinSelectFieldsWithAlias()</code>.</li>\n</ul>\n</p>\n<p>Some bugs have also been reported and sometimes PR have been submitted. Thank you for your interest and commitment to Pomm. If some of you plan to assist the <a href="http://http://confoo.ca">Confoo</a> conference in Montreal in Feb 2013, I have submitted <a href="http://confoo.ca/en/call-for-papers/speaker/gregoire-hubert">a talk about Postgres and Pomm</a>, so if you are interested to hear about that, do not hesitate to register and vote for my talk.</p>\n	t
pomm-1-0-6-is-out	Pomm 1.0.6 is out	2012-09-12 13:35:47.413922	2012-09-12 13:35:47.413922	<p>This new version of the stable branch of Pomm fixes a potential security issue when using the <code>PgNumber</code> converter that could lead to SQL injection. Thank so much to <a href="https://github.com/kcivey">Keith C.Ivey</a> for spotting and fixing the problem. Some other minor bugs have been killed.</p>\n	t
the-real-1-0-6-is-out	The real 1.0.6 is out.	2012-10-19 12:12:55.213947	2012-10-19 12:12:55.213947	<p>I am happy to announce the immediate release of Pomm 1.0.6. The previously announced 1.0.6 on this website was a mistaken 1.0.5.</p><p>This release fix several bugs in the converter system especially when entities and arrays were combined together. The HStore converter has also been enhanced (like the 1.1) and is now faster while being by far less restrictive on key names.</p> 	t
presentation-about-postgresql-and-pomm-in-nantes	Presentation about Postgresql and Pomm in Nantes.	2012-10-19 12:21:46.037977	2012-10-19 12:21:46.037977	<p>I will be giving a presentation about all the Postgresql's goodness and how to use them in PHP with Pomm. The presentation will take place the 29th of October in Nantes. More information on the <a href="http://www.afup.org/pages/rendezvous/">AFUP's website</a>.</p><p>Hope to meet you there.</p>	t
a-mailing-list-is-now-available	A mailing list is now available.	2012-10-26 14:34:51.067884	2012-10-26 14:34:51.067884	<p>A <a href="https://groups.google.com/forum/?fromgroups#!forum/pommproject">mailing list</a> has been created on google groups because I received some emails asking me questions about Pomm on my private email or github issue and I thought these should profit to anyone interested.</p><p>Enjoy.</p>	t
pomm-1-0-0-is-out	Pomm 1.0.0 is out !	2012-02-29 20:59:57.669702	2012-02-29 20:59:57.669702	\n<p>For this special occasion, this shiny new website showed up, great thanks to twitter guys and their bootstrap project, it is really aweswome.</p><p>As stated in the previous blog article, Postgresql is a superb relational database system that can let you deal with your data as objects. With that in mind, I started to play with objects and arrays but the converter system quickly showed limitations. The heart of <i>Pomm</i> has been recoded and now, it can handle arrays of objects containing arrays of objects.</p><p>The possibilities offered are immense as you still can benefit from the constraint and relational system to get data consistency and in the same time, issue queries that shape your data in a nice way and minimize the PHP complexity. The example of the query that returns the author and all his blog posts in an array illustrate how handy such method is coupled with <i>Pomm</i> converter system.</p><p>Even if the converter is one of the best features provided by <i>Pomm</i>, it should not hide others that help you along your developments: Collection and Pager classes, the fields methods, filters, Where class have all been coded because they were needed at one point.</p><p>This pragmatic approach makes <i>Pomm</i> the rapid development tool to empower your PHP script with all Postgresql goodnesses. The best being kept for the end, <i>Pomm</i> keeps you as close as possible to de database so your applications are faaaaaaaaaaaaaast whatever you make them in plain PHP or using a framework like <a href="http://silex.sensiolabs.org/">Silex</a> or <a href="http://symfony.com/">Symfony2</a>.</p><p>Take care and enjoy !</p>\n	t
important-bugfix-1-0-1-is-out	Important bugfix: 1.0.1 is out	2012-03-09 13:32:20.261845	2012-03-09 13:32:20.261845	<p>In order to fix an important bug in the base map class generation, the 1.0.1 is available sooner as expected. The bug was arrays were generated to incorrect types that ware not handled by any converter. Unfortunately the map generator was the only part missing in the test suite. More sad is the fact that the 1.0.0 version was released with this bug.</p>\n<p>Another point, there is a new little feature in the <code>PgEntity</code> converter: the <code>_extra</code> field. This is used to handle any extra field that would come with a table composite data in query like shown in <a href="http://pomm.coolkeums.org/documentation/examples#objects">this code example</a>. Regardless to this specific feature, it is important to set up a release and version policy at this point. Can extra features be added into a mainstream release? I think not because it makes the documentation obsolete and can introduce side effects in the way the API is used. From now, <strong>the 1.0 branch will not include any new feature</strong>.</p>\n<p>The last point is about PHP namespaces used in the generated map files. The name provided as option to the database constructor (or to the <code>Service</code> class) is used. If not provided, the real database name is used which can lead to problems when different database names are used between the development and the production environments. This <code>name</code> options was implemented but not documented.</p>\n<p>With this release, Pomm project is providing the best release so far.</p>	t
pommguard-new-extension-for-silex	PommGuard: New extension for Silex.	2012-03-22 20:04:06.489899	2012-03-22 20:04:06.489899	 <p>I am happy to release a new service provider for the <a href="http://silex.sensiolabs.org/">Silex µ-framework</a>. <a href="http://packagist.org/packages/ghub/pomm-guard-service-provider">PommGuardServiceProvider</a> is an authentication and authorization manager that provides \n<ul>\n  <li>simple mechanisms to protect your controllers using the new <a href="http://silex.sensiolabs.org/doc/usage.html#route-middlewares">route middlewares feature</a></li>\n  <li>users, groups and credentials</li>\n  <li>out of the box simple solution</li>\n</ul></p>\n<p>One of the greatest strength of that system is <em>extensibility</em>. Using Postgres inheritance, you can easily extend given users and groups to create your own profiles. See the <a href="https://github.com/chanmix51/PommGuardServiceProvider">documentation</a> for more details. Enjoy.</p>	t
pomm-1-0-3-is-out-and-development-branch-forked-to-1-1	Pomm 1.0.3 is out and development branch forked to 1.1	2012-05-31 08:42:16.405929	2012-05-31 08:42:16.405929	<p>The last revisions of Pomm 1.0.x did fix some serious limitations about the field content size in arrays or entities. It sounds Pomm can now handle content up to the maximum default size allowed by postgresql in a faster way. The 1.0 branch will now continue its life, only bugs and security issues will be fixed on this branch. This ensures the documentation to be up to date and you to be able to easily migrate from one minor to another without facing problems.</p>\n<p>In the same time, the master branch will add new features as there are already some requests pending in github. Do not hesitate to express yourself on what you would like to add to or remove from Pomm.</p>	t
2-talks-about-postgres-and-pomm-in-june-2012	2 talks about Postgres and Pomm in June 2012	2012-04-11 18:50:55.65792	2012-04-11 18:50:55.65792	<p>I am really happy to announce I am going to talk about Postgresql during the <a href="http://paris2012.live.symfony.com/speakers">Symfony live 2012 in Paris</a>. While this conference will be mostly about how to take advantage of Pg features in web development I will finish it with presenting Pomm. This talk will be in English and the sf live is planned on 7-8th of June. In case you would be more interested into Pomm, I will also participate to <a href="http://afup.org/pages/forumphp2012/">the PHP forum in Paris</a>. Even thought the conference is at the same place (Cité universitaire de Paris) this one will be in French and 2 days before (5-6th of June).</p> \n<p>More info on this blog later...</p>	f
use-form-with-pomm-in-silex	Use form with Pomm in Silex	2012-11-21 15:05:38.015034	2012-11-21 15:05:38.015034	\n<p>One may be tempted to use Postgresql's nice constraint system to validate forms but it is indeed a bad idea. Forms are business oriented rules, there can be multiple forms with multiple validation rules for the same group of database objects. Moreover, these rules can change often. Coding them in the PHP layer is by far a best choice and Symfony provides two components: <a href="https://github.com/symfony/Form [Form component]">form</a> and <a href="https://github.com/symfony/Validator [Validator component]">validator</a>. These components are integrated in the Symfony Standard Edition Framework but they can also be used with your own development framework and ... the <a href="https://github.com/fabpot/Silex [Silex]">Silex µ-framework</a>.</p>\n\n<p>This post will show a small example on how to create and validate form using Silex.</p>\n\n<h2>Form class creation</h2>\n\n<p>If you read the <a href="http://symfony.com/doc/current/book/forms.html [Symfony documentation]">documentation</a> of the Form component you could be puzzle about how to set up your forms amongst the many ways made possible by this nice piece of software. The <a href="http://silex.sensiolabs.org/doc/providers/form.html [Silex Form documentation]">Silex documentation</a> also proposes a simple and efficient way to achieve validation with forms. The first difference with the documentation is that we are using Pomm hence non <a href="http://en.wikipedia.org/wiki/Plain_Old_Java_Object">POPO</a> entities. Since entities values are not stored in real attributes nor use real getters, it is not possible to use the java-ish implementation of the validator metadata classes. </p>\n\n<p>Fortunately, the Form component is very modular and accepts to declare validation rules directly with from the FormBuilder. Let's create a Form class in a dedicated namespace of our application:</p>\n\n<script src="https://gist.github.com/4124003.js?file=Comment.php"></script>\n\n<p>What do we have here ?</p>\n\n<p>A class that extends the <code>AbstractType</code> and implements the two abstract methods needed to create a form: </p>\n\n\n<ul>\n<li><code>buildForm</code> is trigged by the form factory to describe the form.</li>\n<li><code>getName</code> is used to store the form's values.</li>\n</ul>\n\n\n<p>The great thing here is the form builder accepts validation rules as parameter of each field allowing developers to set in one shot fields definition and validation.</p>\n\n<h2>Set up the form</h2>\n\n<script src="https://gist.github.com/4124003.js?file=app1.php"></script>\n\n<p>This controller's goal is to display a blog post and a form for comments. The first lines retrieve the blog post with all its comments (if any) using a <a href="http://pomm.coolkeums.org/documentation/examples#objects">specific query</a> of the model layer. If the post does not exist, the URL points to a non existent resource and 404 error page is returned. </p>\n\n<p>Then, the form factory is invoked with our <code>Form\\Comment</code> instance as argument and the view is extracted from the form and passed to the template.</p>\n\n<h2>Validate the form</h2>\n\n<script src="https://gist.github.com/4124003.js?file=app2.php"></script>\n\n<p>The code is almost self explanatory. It looks quite the same as the previous example but instead of extracting the view from the form, the <code>validate</code> method triggers the validation set up in the <code>Form\\Comment</code>. It is then easy to check if the form is valid or not. If it is the case, the <code>createAndSaveObject</code> method is called to hydrate and save a comment object from the cleaned values. </p></div>\n	f
pomm-1-1-0-is-available	Pomm 1.1.0 is available	2012-12-11 23:17:47.527012	2012-12-11 23:17:47.527012	\n<p>It all started with <a href="https://github.com/chanmix51/sfPgLookPlugin/tree/9655db285df5eb57b1871b3f0542c589d786e48e">symfony 1 PgLook plugin</a> 3 years ago. Pomm's first commit was made nearly 2 years ago and today, Pomm 1.1.0 is out.</p>\n<p>During this time spent in making Pomm a better Object Model Manager, the initial idea that was lurking under years of practice of ORMs and PDO sprung up. Relational databases have been made to manipulate sets of data. By definitions sets are extendible and are hard to fit in the OOP world were classes must be defined and typed. Pomm now comes with a rich API that provides fields selector methods and formatters so programmers can shape sets using Postgres unique features and hydrate them into PHP objects.</p>\n<p>Pomm 1.1 features Postgresql 9.2 range and json type support. The HStore support has been greatly enhanced, you can really use HStore to save any PHP associative arrays as long as they contain strings. Collections fetched from the database can be easily exported to array to ease php's Json transformation needed when coding a web service ... There are a lot more features coming with this release, all born from the pragmatic necessity of real life projects.</p>\n<p>Programmers are able to leverage the power of their relational database trough using SQL and in the same time benefit from a handy object oriented model manager. Some of them showed enthusiasm, some other gave support, reported bugs and posted pull requests on github. Many thanks to all who did contribute to make Pomm a better software.</p>\n	f
2-years-of-pomm	2 years of Pomm	2013-01-10 10:13:51.840163	2013-01-10 10:13:51.840163	\n<p>Formerly, it was <a href="">sfPgLookPlugin</a>, a symfony1 plugin. The 10th January 2011, <a href="https://github.com/chanmix51/Pomm/tree/c437c765f407459dd35594dc151c32140e8315f8">Pomm's first commit</a> was pushed to Github. Since this day, Pomm has evolved based on the needs of real world projects.</p>\n<p>Its first feature -- alongside being an object model manager -- was the converter, because 't' and 'f' were pretty poor boolean in PHP. After that, came the need of being able to deal with custom types hence database objects, data mapper, database inspector, inheritance support and so on.</p>\n<p>It is still a great pleasure to use Pomm in today's professional projects. It allows to set up very quickly models based on complex database structures and wrap PHP around Postgresql's features. It has often been a question from people hearing about Pomm for the first time: "Are you saying we should set business logic in the database ?". Of course they are no universal good answer to that, I use to say "It depends how frequently your business rules change". I use to store slugification, password hashing, list ordering in the database because these tend not to change over time and it makes my PHP layer simpler to assume the database is doing the job. This would also work for every application or script using the database.</p>\n<p>There are today two versions of Pomm, 1.1 being the latest stable. Thank you to all people who did participate with their feedback, emails, bugs submission or push request. 1.0 version will be maintained for bugs and security issues until 1st of March. The 1.1 version will then be the stable version until a 2.0 version comes out.</p>\n	t
pomm-1-1-1-is-out	Pomm 1.1.1 is out.	2013-02-12 14:19:00.53107	2013-02-12 14:19:00.53107	\n<p>This is a maintenance release.</p><p>It fixes an annoying bug in the maps classes remote collection filter.</p><p>Since Pomm has been tested on amazon cloud, it appeared the dash character was not allowed in DSN. This is now fixed.</p>\n	t
a-new-tutorial-for-pomm	A new tutorial for Pomm	2013-02-25 20:48:49.838977	2013-02-25 20:48:49.838977	\n<p>I am happy to announce the availability of a <a href="https://github.com/chanmix51/elcaro/tree/english">new tutorial</a> for Pomm. It has been a very interesting collaborative work with <a href="https://github.com/jubianchi">Julien Bianchi</a>, <a href="https://github.com/sanpii">Nicolas Joseph</a> and <a href="https://github.com/pborreli">Pascal Borreli</a>. </p>\n<p>With a simple example of employees belonging to departments, we can go trough several of Pomm's nice features like elastic objects and fields formatters while writing a Postgresql recursive query.</p>\n<p>The feedback we have about it mention it takes a couple of hours to get it done and people feel confident to go for a Silex or Symfony project using Pomm after the tutorial. So far so good. Enjoy !</p>\n	t
pomm-s-french-tutorial-on-developpez-com	Pomm's French tutorial on developpez.com	2013-02-27 10:04:03.743017	2013-02-27 10:04:03.743017	\n<div>\n<p>Thanks to <a href="https://twitter.com/MaitrePylos">MaitrePylos</a>'s work, the french version of the tutorial is available on <a href="http://www.developpez.com/index/redirect/15900/Pomm-un-gestionnaire-de-modele-objet-dedie-a-PostgreSQL-un-article-de-Gregoire-Hubert/">developpez.com</a>. </p>\n<p>Do not hesitate to post your feedback on the <a href="http://php.developpez.com/actu/51913/Manipulez-vos-donnees-avec-Pomm-un-ORM-PHP-pour-PostgreSQL/">dedicated topic</a>.</p></div>	t
\.


--
-- Name: news_pk; Type: CONSTRAINT; Schema: pomm; Owner: -; Tablespace: 
--

ALTER TABLE ONLY news
    ADD CONSTRAINT news_pk PRIMARY KEY (slug);


--
-- PostgreSQL database dump complete
--

