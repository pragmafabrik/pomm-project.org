{% extends "layout.html.twig" %}

{% block title %}howto | Pomm 2.x in few steps{% endblock %}

{% block css %}    <link href="/css/vim.css" rel="stylesheet" media="screen" />
{% endblock %}
{% block title_baseline %}Pomm 2.0 in few steps{% endblock %}
{% block acroche_baseline %}
    Quick Pomm2 setup recipe
{% endblock %}
{% block content %}
<div class="container">
        <div class="row">
          <div class="col-md-12">
            <p>
              <dl>
                <dt>Requirements:</dt>
                <dd>&#10149; PHP &gt;= 5.4.4</dd>
                <dd>&#10149; A working Postgresql database</dd>
              </dl>
            </p>
            <h3>Step 1: Install Pomm</h3>
            <p>Installing Pomm 2 is as simple as adding the following packages in a <code>composer.json</code> file:
<code><pre class="vimphp"><span class="Special">{</span>
    <span class="Statement">"require"</span>: <span class="Special">{</span>
        <span class="Statement">"pomm-project/cli"</span>: <span class="String">"2.0.*@dev"</span>,
        <span class="Statement">"pomm-project/model-manager"</span>: <span class="String">"2.0.*@dev"</span>,
        <span class="Statement">"pomm-project/foundation"</span>: <span class="String">"2.0.*@dev"</span>
    <span class="Special">}</span>
<span class="Special">}</span></pre></code></p>
            <p>Launch <code>composer.phar install</code> and it will install Pomm2 and sets the autoloader accordingly.</p>
            <p>Now it is time to configure the database connections. The CLI expects to get a configured <code>Pomm</code> instance from requiring the file <code>.pomm_cli_bootstrap.php</code>in the project root directory. Let's fill it with database configuration:
<code><pre class="vimphp">
<span class="Special">&lt;?php</span> <span class="Comment">// .pomm_cli_bootstrap.php</span>

<span class="Include">use</span> \PommProject\Foundation\Pomm;

<span class="Operator">$</span><span class="Identifier">loader</span> <span class="Operator">=</span> <span class="Include">require</span> <span class="Constant">__DIR__</span><span class="Operator">.</span>'<span class="String">/vendor/autoload.php</span>';
<span class="Operator">$</span><span class="Identifier">loader</span><span class="Structure">-&gt;</span><span class="Function">add</span><span class="Special">(</span><span class="Type">null</span>, <span class="Constant">__DIR__</span><span class="Special">)</span>;

<span class="Statement">return</span> <span class="Define">new</span> Pomm<span class="Special">([</span>'<span class="String">my_db</span>' <span class="Operator">=</span><span class="Operator">&gt;</span>
    <span class="Special">[</span>
        '<span class="String">dsn</span>' <span class="Operator">=</span><span class="Operator">&gt;</span> '<span class="String">pgsql://user:pass@host:port/my_db_name</span>',
        '<span class="String">class:session_builder</span>' <span class="Operator">=</span><span class="Operator">&gt;</span> '<span class="String">\PommProject\ModelManager\SessionBuilder</span>',
    <span class="Special">]</span>
<span class="Special">])</span>;</pre></code>
            The name of the database is important since it will be used in the namespace for generated classes.</p>
            <p>At this point, the CLI tool should be functional, just enter <code>php vendor/bin/pomm.php</code> in a terminal, it should greet you with a help message. Try to launch a <code>pomm:inspect:database</code> command, it should output something similar to:
            <code><pre>$ php vendor/bin/pomm.php pomm:inspect:database my_db
Found 1 schemas in database.
+-----------+--------+-----------+-------------------------+
| name      | oid    | relations | comment                 |
+-----------+--------+-----------+-------------------------+
| public    | 2200   | 11        | standard public schema  |
+-----------+--------+-----------+-------------------------+
</pre></code></p>
            <h3>Step 2: Generate model classes</h3>
            <p>The CLI can also be used to generate model files. If you want to generate model files for all the relations in a schema, just enter:
<code><pre>
$ php vendor/bin/pomm.php pomm:generate:schema-all my_db public
 ✓  Creating file './MyDb/PublicSchema/AutoStructure/Computer.php'.
 ✓  Creating file './MyDb/PublicSchema/ComputerModel.php'.
 ✓  Creating file './MyDb/PublicSchema/Computer.php'.
…
</pre></code>
              <ul class="list-unstyled">
                <li>The class in <code>AutoStructure/Entity.php</code> owns the structure dependent code introspected from the database.</li>
                <li>The class in <code>EntityModel.php</code> is where the custom queries for the according entity will take place.</li>
                <li>The class in <code>Entity.php</code> is the flexible entity code. Getter and setters overloads will go there.</li>
              </ul>
            </p>
            <h3>Step 3: Documentation</h3>
            <p>Next read is in <a href=="https://github.com/pomm-project/Foundation/blob/master/documentation/foundation.rst">Foundation’s documentation</a> or the <a href="https://github.com/pomm-project/ModelManager/blob/master/README.md">Model Manager’s documentation</a>.</p>
          </div> <!-- col-md-12 -->
        </div> <!-- row -->
    </div>
{% endblock %}
