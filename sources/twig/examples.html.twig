{% extends "layout.html.twig" %}
{% block title %}Examples{% endblock %}

{% block content %}
<div class="post">
  <div class="panel panel-warning">
    <div class="panel-heading">
      <h2>Pomm 1.x code examples</h2>
    </div>
    <div class="panel-body">
      <div class="bs-callout bs-callout-info">
        <p>Here are some examples to show how to ues Pomm. If you are still wondering how Pomm is different from classical ORM, you should <a href="{{ app.url_generator.generate('main_about') }}">read this first</a>.</p>
      </div>
      <div class="entry">
        <h3>Retrieving data</h3>
        <a name="retrieving"></a>
        <p>This is just a simple example of how Pomm makes things simple. Imagine you have such structure in the database:</p>
        <script src="https://gist.github.com/2000890.js?file=author_table_structure.txt"></script>
        <p>Note the array of varchars for the <code>authors</code> field. Let's fetch a single result and see how it looks like in PHP:</p>
    <script src="https://gist.github.com/2000890.js?file=short_author.php"></script>
        <p>Here is the result:</p>
        <script src="https://gist.github.com/2000890.js?file=output.txt"></script>
        <p>The types are converted into their PHP equivalents. The <code>authors</code> field is an array of strings, timestamps are turned into a php <code>DateTime</code> instance. This will also work with almost all basic geometric types, interval, hstore, ltree and pg objects.</p>
      </div><div class="entry">
        <h3>findWhere</h3>
        <a name="find_where"></a>
        <p>Assumed you have a <code>power_supply_transformer</code> table in your database in the <code>online</code> schema, a <code>PowerSupplyTransformer</code> model class will be generated with the namespace "YourDb\Online". You can directly retrieve <code>PowerSupplyTransformer</code> instances from the database:</p>
        <script src="https://gist.github.com/1380200.js?file=get_instances.php"></script>
      </div>
      <div class="entry">
        <h3>Query builder</h3>
        <a name="query"></a>
        <p>
        Pomm comes with a simple <i>where</i> clause builder to chain logical statements. Every statement embed the optional values that will be escaped. All Postgresql's operators and functions can be used in the passed conditions. The <code>IN ( ... )</code> is also available.
        </p>
        <script src="https://gist.github.com/chanmix51/7412106.js"></script>
      </div>
      <div class="entry">
        <h3>Modeling entities</h3>
        <a name="modeling"></a>
        <p>With Pomm, it is possible to changing the projection operation (SELECT). By adding or removing select fields the according entities are filled with different values set. These fields will be accessed like any other 'existing' field but will not be saved by UPDATE. The following example shows how to strip password information and add <code>age</code> information to a <code>Customer</code> mapping:</p>
        <script src="https://gist.github.com/chanmix51/7399209.js"></script>
        <p>It is possible to create as many field getters as wanted, only <code>getSelectFields</code>, <code>getGroupByFields</code> and <code>getFields</code> are used internally by Pomm's finders.</p>
      </div>
      <div class="entry">
        <h3>Custom queries</h3>
        <a name="custom"></a>
        <p>Map classes are the place to code the queries that define new finders and processes in the database. SQL queries take advantage of Pomm methods to retrieve structure information and let the programmers to focus on what the queries actually do. The following query shows an example of a simple join:</p>
        <script src="https://gist.github.com/chanmix51/7417564.js?file=simple_join.php"></script>
        <p>Splitting the queries from the clause part is often a good idea so same queries can be re-used with different conditions. If no condition is to be used, the example below can be followed:</p>
        <script src="https://gist.github.com/chanmix51/7417564.js?file=findAll.php"></script>
      </div>
      <div class="entry">
        <h3>Generating model files</h3>
        <a name="generating"></a>
        <p>
        With Pomm, the database is the reference. Model files are generated by introspecting your database schemas. Generated model classes will have their namespace set upon database schema name. The following script generate the model files in the <code>/tmp/YourDb/YourSchema</code> directory. 
        </p>
        <script src="https://gist.github.com/1380129.js?file=generate_model.php"></script>
      </div>
      <div class="entry">
        <h3>Composite types</h3>
        <a name="composite"></a>
        <p><a href="http://www.postgresql.org/docs/9.0/static/rowtypes.html">Composite types</a> are a way to represent complex data as objects in a relational database. By example, lot of data are tied to postal addresses in databases. If these addresses are not to be shared between records, they could be stacked in the same table as the entity they belong to: better performances, easier to retrieve.</p>
    <script src="https://gist.github.com/chanmix51/7447181.js?file=address_type.sql"></script>
    <p>As any other types, composite types converters must be registered to the database so Pomm knows how to handle them. The third argument is the FQCN of the type that will hold the data. If not provided, the converter will input & output arrays. Otherwise an instance of the given class will be used.</p>
    <script src="https://gist.github.com/chanmix51/7447181.js?file=pg_row.php"></script>
    <p>The type class is straight simple, it does not even need a constructor if it extends <code>\Pomm\Type\Composite</code>. It is preferred to use objects instead of arrays as they can come with getters and setters but **composite fields must be public** in this class.</p>
    <script src="https://gist.github.com/chanmix51/7447181.js?file=AddressType.php"></script>
    <p>This instance is then automatically injected into entities and can be accessed as any other objects:</p>
    <script src="https://gist.github.com/chanmix51/7447181.js?file=show_customers.php"></script>
          </div>
    </div>
  </div>
</div>
{% endblock %}
